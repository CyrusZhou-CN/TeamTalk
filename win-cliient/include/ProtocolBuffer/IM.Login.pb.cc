// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#include "IM.Login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace IM {
namespace Login {
PROTOBUF_CONSTEXPR IMMsgServReq::IMMsgServReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct IMMsgServReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMMsgServReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMMsgServReqDefaultTypeInternal() {}
  union {
    IMMsgServReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMMsgServReqDefaultTypeInternal _IMMsgServReq_default_instance_;
PROTOBUF_CONSTEXPR IMMsgServRsp::IMMsgServRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prior_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backip_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_code_)*/0
  , /*decltype(_impl_.port_)*/0u} {}
struct IMMsgServRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMMsgServRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMMsgServRspDefaultTypeInternal() {}
  union {
    IMMsgServRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMMsgServRspDefaultTypeInternal _IMMsgServRsp_default_instance_;
PROTOBUF_CONSTEXPR IMLoginReq::IMLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.online_status_)*/0
  , /*decltype(_impl_.client_type_)*/0} {}
struct IMLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMLoginReqDefaultTypeInternal() {}
  union {
    IMLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMLoginReqDefaultTypeInternal _IMLoginReq_default_instance_;
PROTOBUF_CONSTEXPR IMLoginRes::IMLoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_info_)*/nullptr
  , /*decltype(_impl_.server_time_)*/0u
  , /*decltype(_impl_.result_code_)*/0
  , /*decltype(_impl_.online_status_)*/0} {}
struct IMLoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMLoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMLoginResDefaultTypeInternal() {}
  union {
    IMLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMLoginResDefaultTypeInternal _IMLoginRes_default_instance_;
PROTOBUF_CONSTEXPR IMLogoutReq::IMLogoutReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct IMLogoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMLogoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMLogoutReqDefaultTypeInternal() {}
  union {
    IMLogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMLogoutReqDefaultTypeInternal _IMLogoutReq_default_instance_;
PROTOBUF_CONSTEXPR IMLogoutRsp::IMLogoutRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMLogoutRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMLogoutRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMLogoutRspDefaultTypeInternal() {}
  union {
    IMLogoutRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMLogoutRspDefaultTypeInternal _IMLogoutRsp_default_instance_;
PROTOBUF_CONSTEXPR IMKickUser::IMKickUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.kick_reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMKickUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMKickUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMKickUserDefaultTypeInternal() {}
  union {
    IMKickUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMKickUserDefaultTypeInternal _IMKickUser_default_instance_;
PROTOBUF_CONSTEXPR IMDeviceTokenReq::IMDeviceTokenReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.device_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.client_type_)*/0} {}
struct IMDeviceTokenReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMDeviceTokenReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMDeviceTokenReqDefaultTypeInternal() {}
  union {
    IMDeviceTokenReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMDeviceTokenReqDefaultTypeInternal _IMDeviceTokenReq_default_instance_;
PROTOBUF_CONSTEXPR IMDeviceTokenRsp::IMDeviceTokenRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u} {}
struct IMDeviceTokenRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMDeviceTokenRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMDeviceTokenRspDefaultTypeInternal() {}
  union {
    IMDeviceTokenRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMDeviceTokenRspDefaultTypeInternal _IMDeviceTokenRsp_default_instance_;
PROTOBUF_CONSTEXPR IMKickPCClientReq::IMKickPCClientReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMKickPCClientReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMKickPCClientReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMKickPCClientReqDefaultTypeInternal() {}
  union {
    IMKickPCClientReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMKickPCClientReqDefaultTypeInternal _IMKickPCClientReq_default_instance_;
PROTOBUF_CONSTEXPR IMKickPCClientRsp::IMKickPCClientRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMKickPCClientRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMKickPCClientRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMKickPCClientRspDefaultTypeInternal() {}
  union {
    IMKickPCClientRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMKickPCClientRspDefaultTypeInternal _IMKickPCClientRsp_default_instance_;
}  // namespace Login
}  // namespace IM
namespace IM {
namespace Login {

// ===================================================================

class IMMsgServReq::_Internal {
 public:
};

IMMsgServReq::IMMsgServReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMMsgServReq)
}
IMMsgServReq::IMMsgServReq(const IMMsgServReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMMsgServReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServReq)
}

inline void IMMsgServReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

IMMsgServReq::~IMMsgServReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMMsgServReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMMsgServReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMMsgServReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMMsgServReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgServReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgServReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMMsgServReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMMsgServReq)
  return target;
}

size_t IMMsgServReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMMsgServReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgServReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMMsgServReq*>(
      &from));
}

void IMMsgServReq::MergeFrom(const IMMsgServReq& from) {
  IMMsgServReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMMsgServReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgServReq::CopyFrom(const IMMsgServReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMMsgServReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServReq::IsInitialized() const {
  return true;
}

void IMMsgServReq::InternalSwap(IMMsgServReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string IMMsgServReq::GetTypeName() const {
  return "IM.Login.IMMsgServReq";
}


// ===================================================================

class IMMsgServRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMMsgServRsp>()._impl_._has_bits_);
  static void set_has_prior_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_backip_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IMMsgServRsp::IMMsgServRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMMsgServRsp)
}
IMMsgServRsp::IMMsgServRsp(const IMMsgServRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMMsgServRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prior_ip_){}
    , decltype(_impl_.backip_ip_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.port_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prior_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prior_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prior_ip()) {
    _this->_impl_.prior_ip_.Set(from._internal_prior_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.backip_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backip_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_backip_ip()) {
    _this->_impl_.backip_ip_.Set(from._internal_backip_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_code_, &from._impl_.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServRsp)
}

inline void IMMsgServRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prior_ip_){}
    , decltype(_impl_.backip_ip_){}
    , decltype(_impl_.result_code_){0}
    , decltype(_impl_.port_){0u}
  };
  _impl_.prior_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prior_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.backip_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.backip_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMMsgServRsp::~IMMsgServRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMMsgServRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prior_ip_.Destroy();
  _impl_.backip_ip_.Destroy();
}

void IMMsgServRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMMsgServRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMMsgServRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.prior_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.backip_ip_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.result_code_ = 0;
  _impl_.port_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgServRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IM.BaseDefine.ResultType result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::IM::BaseDefine::ResultType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string prior_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prior_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional string backip_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_backip_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgServRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMMsgServRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.BaseDefine.ResultType result_code = 1;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result_code(), target);
  }

  // optional string prior_ip = 2;
  if (_internal_has_prior_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prior_ip().data(), static_cast<int>(this->_internal_prior_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.prior_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prior_ip(), target);
  }

  // optional string backip_ip = 3;
  if (_internal_has_backip_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backip_ip().data(), static_cast<int>(this->_internal_backip_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.backip_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_backip_ip(), target);
  }

  // optional uint32 port = 4;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMMsgServRsp)
  return target;
}

size_t IMMsgServRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMMsgServRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string prior_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prior_ip());
    }

    // optional string backip_ip = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_backip_ip());
    }

  }
  // .IM.BaseDefine.ResultType result_code = 1;
  if (this->_internal_result_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  // optional uint32 port = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgServRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMMsgServRsp*>(
      &from));
}

void IMMsgServRsp::MergeFrom(const IMMsgServRsp& from) {
  IMMsgServRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMMsgServRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_prior_ip(from._internal_prior_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_backip_ip(from._internal_backip_ip());
    }
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgServRsp::CopyFrom(const IMMsgServRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMMsgServRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServRsp::IsInitialized() const {
  return true;
}

void IMMsgServRsp::InternalSwap(IMMsgServRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prior_ip_, lhs_arena,
      &other->_impl_.prior_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.backip_ip_, lhs_arena,
      &other->_impl_.backip_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgServRsp, _impl_.port_)
      + sizeof(IMMsgServRsp::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(IMMsgServRsp, _impl_.result_code_)>(
          reinterpret_cast<char*>(&_impl_.result_code_),
          reinterpret_cast<char*>(&other->_impl_.result_code_));
}

std::string IMMsgServRsp::GetTypeName() const {
  return "IM.Login.IMMsgServRsp";
}


// ===================================================================

class IMLoginReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMLoginReq>()._impl_._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMLoginReq::IMLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMLoginReq)
}
IMLoginReq::IMLoginReq(const IMLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.online_status_){}
    , decltype(_impl_.client_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_version()) {
    _this->_impl_.client_version_.Set(from._internal_client_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.online_status_, &from._impl_.online_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_type_) -
    reinterpret_cast<char*>(&_impl_.online_status_)) + sizeof(_impl_.client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginReq)
}

inline void IMLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.online_status_){0}
    , decltype(_impl_.client_type_){0}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMLoginReq::~IMLoginReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
  _impl_.password_.Destroy();
  _impl_.client_version_.Destroy();
}

void IMLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.client_version_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.online_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.client_type_) -
      reinterpret_cast<char*>(&_impl_.online_status_)) + sizeof(_impl_.client_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.UserStatType online_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_online_status(static_cast<::IM::BaseDefine::UserStatType>(val));
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.ClientType client_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::IM::BaseDefine::ClientType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_client_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .IM.BaseDefine.UserStatType online_status = 3;
  if (this->_internal_online_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_online_status(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 4;
  if (this->_internal_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_type(), target);
  }

  // optional string client_version = 5;
  if (_internal_has_client_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_version().data(), static_cast<int>(this->_internal_client_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.client_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLoginReq)
  return target;
}

size_t IMLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // optional string client_version = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_version());
  }

  // .IM.BaseDefine.UserStatType online_status = 3;
  if (this->_internal_online_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_online_status());
  }

  // .IM.BaseDefine.ClientType client_type = 4;
  if (this->_internal_client_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMLoginReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMLoginReq*>(
      &from));
}

void IMLoginReq::MergeFrom(const IMLoginReq& from) {
  IMLoginReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_client_version()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  if (from._internal_online_status() != 0) {
    _this->_internal_set_online_status(from._internal_online_status());
  }
  if (from._internal_client_type() != 0) {
    _this->_internal_set_client_type(from._internal_client_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMLoginReq::CopyFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginReq::IsInitialized() const {
  return true;
}

void IMLoginReq::InternalSwap(IMLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_version_, lhs_arena,
      &other->_impl_.client_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMLoginReq, _impl_.client_type_)
      + sizeof(IMLoginReq::_impl_.client_type_)
      - PROTOBUF_FIELD_OFFSET(IMLoginReq, _impl_.online_status_)>(
          reinterpret_cast<char*>(&_impl_.online_status_),
          reinterpret_cast<char*>(&other->_impl_.online_status_));
}

std::string IMLoginReq::GetTypeName() const {
  return "IM.Login.IMLoginReq";
}


// ===================================================================

class IMLoginRes::_Internal {
 public:
  using HasBits = decltype(std::declval<IMLoginRes>()._impl_._has_bits_);
  static void set_has_result_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::IM::BaseDefine::UserInfo& user_info(const IMLoginRes* msg);
  static void set_has_user_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::IM::BaseDefine::UserInfo&
IMLoginRes::_Internal::user_info(const IMLoginRes* msg) {
  return *msg->_impl_.user_info_;
}
void IMLoginRes::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
IMLoginRes::IMLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMLoginRes)
}
IMLoginRes::IMLoginRes(const IMLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMLoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_string_){}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.server_time_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.online_status_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_result_string()) {
    _this->_impl_.result_string_.Set(from._internal_result_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    _this->_impl_.user_info_ = new ::IM::BaseDefine::UserInfo(*from._impl_.user_info_);
  }
  ::memcpy(&_impl_.server_time_, &from._impl_.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.online_status_) -
    reinterpret_cast<char*>(&_impl_.server_time_)) + sizeof(_impl_.online_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginRes)
}

inline void IMLoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_string_){}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.server_time_){0u}
    , decltype(_impl_.result_code_){0}
    , decltype(_impl_.online_status_){0}
  };
  _impl_.result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMLoginRes::~IMLoginRes() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_info_;
}

void IMLoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.result_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.user_info_ != nullptr);
      _impl_.user_info_->Clear();
    }
  }
  ::memset(&_impl_.server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_code_) -
      reinterpret_cast<char*>(&_impl_.server_time_)) + sizeof(_impl_.result_code_));
  _impl_.online_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMLoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.ResultType result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::IM::BaseDefine::ResultType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional .IM.BaseDefine.UserStatType online_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_online_status(static_cast<::IM::BaseDefine::UserStatType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .IM.BaseDefine.UserInfo user_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_time(), target);
  }

  // .IM.BaseDefine.ResultType result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result_code(), target);
  }

  // optional string result_string = 3;
  if (_internal_has_result_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginRes.result_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // optional .IM.BaseDefine.UserStatType online_status = 4;
  if (_internal_has_online_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_online_status(), target);
  }

  // optional .IM.BaseDefine.UserInfo user_info = 5;
  if (_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLoginRes)
  return target;
}

size_t IMLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string result_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_result_string());
    }

    // optional .IM.BaseDefine.UserInfo user_info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_info_);
    }

  }
  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_time());
  }

  // .IM.BaseDefine.ResultType result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  // optional .IM.BaseDefine.UserStatType online_status = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_online_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMLoginRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMLoginRes*>(
      &from));
}

void IMLoginRes::MergeFrom(const IMLoginRes& from) {
  IMLoginRes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_result_string(from._internal_result_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(
          from._internal_user_info());
    }
  }
  if (from._internal_server_time() != 0) {
    _this->_internal_set_server_time(from._internal_server_time());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_online_status(from._internal_online_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMLoginRes::CopyFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginRes::IsInitialized() const {
  return true;
}

void IMLoginRes::InternalSwap(IMLoginRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_string_, lhs_arena,
      &other->_impl_.result_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMLoginRes, _impl_.online_status_)
      + sizeof(IMLoginRes::_impl_.online_status_)
      - PROTOBUF_FIELD_OFFSET(IMLoginRes, _impl_.user_info_)>(
          reinterpret_cast<char*>(&_impl_.user_info_),
          reinterpret_cast<char*>(&other->_impl_.user_info_));
}

std::string IMLoginRes::GetTypeName() const {
  return "IM.Login.IMLoginRes";
}


// ===================================================================

class IMLogoutReq::_Internal {
 public:
};

IMLogoutReq::IMLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMLogoutReq)
}
IMLogoutReq::IMLogoutReq(const IMLogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMLogoutReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutReq)
}

inline void IMLogoutReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

IMLogoutReq::~IMLogoutReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMLogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMLogoutReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLogoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IMLogoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMLogoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLogoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLogoutReq)
  return target;
}

size_t IMLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLogoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMLogoutReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMLogoutReq*>(
      &from));
}

void IMLogoutReq::MergeFrom(const IMLogoutReq& from) {
  IMLogoutReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLogoutReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMLogoutReq::CopyFrom(const IMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutReq::IsInitialized() const {
  return true;
}

void IMLogoutReq::InternalSwap(IMLogoutReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string IMLogoutReq::GetTypeName() const {
  return "IM.Login.IMLogoutReq";
}


// ===================================================================

class IMLogoutRsp::_Internal {
 public:
};

IMLogoutRsp::IMLogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMLogoutRsp)
}
IMLogoutRsp::IMLogoutRsp(const IMLogoutRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMLogoutRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.result_code_ = from._impl_.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutRsp)
}

inline void IMLogoutRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMLogoutRsp::~IMLogoutRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMLogoutRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMLogoutRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMLogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLogoutRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_code_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMLogoutRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMLogoutRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLogoutRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLogoutRsp)
  return target;
}

size_t IMLogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLogoutRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMLogoutRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMLogoutRsp*>(
      &from));
}

void IMLogoutRsp::MergeFrom(const IMLogoutRsp& from) {
  IMLogoutRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLogoutRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMLogoutRsp::CopyFrom(const IMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutRsp::IsInitialized() const {
  return true;
}

void IMLogoutRsp::InternalSwap(IMLogoutRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_code_, other->_impl_.result_code_);
}

std::string IMLogoutRsp::GetTypeName() const {
  return "IM.Login.IMLogoutRsp";
}


// ===================================================================

class IMKickUser::_Internal {
 public:
};

IMKickUser::IMKickUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMKickUser)
}
IMKickUser::IMKickUser(const IMKickUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMKickUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.kick_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kick_reason_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.kick_reason_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickUser)
}

inline void IMKickUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){0u}
    , decltype(_impl_.kick_reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMKickUser::~IMKickUser() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMKickUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMKickUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMKickUser::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kick_reason_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.kick_reason_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMKickUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.KickReasonType kick_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kick_reason(static_cast<::IM::BaseDefine::KickReasonType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMKickUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMKickUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  if (this->_internal_kick_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kick_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMKickUser)
  return target;
}

size_t IMKickUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  if (this->_internal_kick_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kick_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMKickUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMKickUser*>(
      &from));
}

void IMKickUser::MergeFrom(const IMKickUser& from) {
  IMKickUser* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_kick_reason() != 0) {
    _this->_internal_set_kick_reason(from._internal_kick_reason());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMKickUser::CopyFrom(const IMKickUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickUser::IsInitialized() const {
  return true;
}

void IMKickUser::InternalSwap(IMKickUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMKickUser, _impl_.kick_reason_)
      + sizeof(IMKickUser::_impl_.kick_reason_)
      - PROTOBUF_FIELD_OFFSET(IMKickUser, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMKickUser::GetTypeName() const {
  return "IM.Login.IMKickUser";
}


// ===================================================================

class IMDeviceTokenReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMDeviceTokenReq>()._impl_._has_bits_);
  static void set_has_client_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMDeviceTokenReq::IMDeviceTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMDeviceTokenReq)
}
IMDeviceTokenReq::IMDeviceTokenReq(const IMDeviceTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMDeviceTokenReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_token_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.client_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.device_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_token().empty()) {
    _this->_impl_.device_token_.Set(from._internal_device_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_type_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenReq)
}

inline void IMDeviceTokenReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_token_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.client_type_){0}
  };
  _impl_.device_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMDeviceTokenReq::~IMDeviceTokenReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMDeviceTokenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_token_.Destroy();
  _impl_.attach_data_.Destroy();
}

void IMDeviceTokenReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMDeviceTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMDeviceTokenReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_.client_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMDeviceTokenReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional .IM.BaseDefine.ClientType client_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::IM::BaseDefine::ClientType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMDeviceTokenReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMDeviceTokenReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string device_token = 2;
  if (!this->_internal_device_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_token().data(), static_cast<int>(this->_internal_device_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMDeviceTokenReq.device_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_token(), target);
  }

  // optional .IM.BaseDefine.ClientType client_type = 3;
  if (_internal_has_client_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_client_type(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMDeviceTokenReq)
  return target;
}

size_t IMDeviceTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMDeviceTokenReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_token = 2;
  if (!this->_internal_device_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_token());
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // optional .IM.BaseDefine.ClientType client_type = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMDeviceTokenReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMDeviceTokenReq*>(
      &from));
}

void IMDeviceTokenReq::MergeFrom(const IMDeviceTokenReq& from) {
  IMDeviceTokenReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_token().empty()) {
    _this->_internal_set_device_token(from._internal_device_token());
  }
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_client_type()) {
    _this->_internal_set_client_type(from._internal_client_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMDeviceTokenReq::CopyFrom(const IMDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenReq::IsInitialized() const {
  return true;
}

void IMDeviceTokenReq::InternalSwap(IMDeviceTokenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_token_, lhs_arena,
      &other->_impl_.device_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMDeviceTokenReq, _impl_.client_type_)
      + sizeof(IMDeviceTokenReq::_impl_.client_type_)
      - PROTOBUF_FIELD_OFFSET(IMDeviceTokenReq, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMDeviceTokenReq::GetTypeName() const {
  return "IM.Login.IMDeviceTokenReq";
}


// ===================================================================

class IMDeviceTokenRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMDeviceTokenRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMDeviceTokenRsp::IMDeviceTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMDeviceTokenRsp)
}
IMDeviceTokenRsp::IMDeviceTokenRsp(const IMDeviceTokenRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMDeviceTokenRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenRsp)
}

inline void IMDeviceTokenRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMDeviceTokenRsp::~IMDeviceTokenRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMDeviceTokenRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void IMDeviceTokenRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMDeviceTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMDeviceTokenRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMDeviceTokenRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMDeviceTokenRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMDeviceTokenRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMDeviceTokenRsp)
  return target;
}

size_t IMDeviceTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMDeviceTokenRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMDeviceTokenRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMDeviceTokenRsp*>(
      &from));
}

void IMDeviceTokenRsp::MergeFrom(const IMDeviceTokenRsp& from) {
  IMDeviceTokenRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMDeviceTokenRsp::CopyFrom(const IMDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenRsp::IsInitialized() const {
  return true;
}

void IMDeviceTokenRsp::InternalSwap(IMDeviceTokenRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMDeviceTokenRsp::GetTypeName() const {
  return "IM.Login.IMDeviceTokenRsp";
}


// ===================================================================

class IMKickPCClientReq::_Internal {
 public:
};

IMKickPCClientReq::IMKickPCClientReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMKickPCClientReq)
}
IMKickPCClientReq::IMKickPCClientReq(const IMKickPCClientReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMKickPCClientReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickPCClientReq)
}

inline void IMKickPCClientReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMKickPCClientReq::~IMKickPCClientReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickPCClientReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMKickPCClientReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMKickPCClientReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMKickPCClientReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickPCClientReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMKickPCClientReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMKickPCClientReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMKickPCClientReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMKickPCClientReq)
  return target;
}

size_t IMKickPCClientReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickPCClientReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMKickPCClientReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMKickPCClientReq*>(
      &from));
}

void IMKickPCClientReq::MergeFrom(const IMKickPCClientReq& from) {
  IMKickPCClientReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickPCClientReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMKickPCClientReq::CopyFrom(const IMKickPCClientReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickPCClientReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickPCClientReq::IsInitialized() const {
  return true;
}

void IMKickPCClientReq::InternalSwap(IMKickPCClientReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMKickPCClientReq::GetTypeName() const {
  return "IM.Login.IMKickPCClientReq";
}


// ===================================================================

class IMKickPCClientRsp::_Internal {
 public:
};

IMKickPCClientRsp::IMKickPCClientRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Login.IMKickPCClientRsp)
}
IMKickPCClientRsp::IMKickPCClientRsp(const IMKickPCClientRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMKickPCClientRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.result_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_code_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.result_code_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickPCClientRsp)
}

inline void IMKickPCClientRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){0u}
    , decltype(_impl_.result_code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMKickPCClientRsp::~IMKickPCClientRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickPCClientRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMKickPCClientRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMKickPCClientRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMKickPCClientRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickPCClientRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_code_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMKickPCClientRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMKickPCClientRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMKickPCClientRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMKickPCClientRsp)
  return target;
}

size_t IMKickPCClientRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickPCClientRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMKickPCClientRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMKickPCClientRsp*>(
      &from));
}

void IMKickPCClientRsp::MergeFrom(const IMKickPCClientRsp& from) {
  IMKickPCClientRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickPCClientRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMKickPCClientRsp::CopyFrom(const IMKickPCClientRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickPCClientRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickPCClientRsp::IsInitialized() const {
  return true;
}

void IMKickPCClientRsp::InternalSwap(IMKickPCClientRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMKickPCClientRsp, _impl_.result_code_)
      + sizeof(IMKickPCClientRsp::_impl_.result_code_)
      - PROTOBUF_FIELD_OFFSET(IMKickPCClientRsp, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMKickPCClientRsp::GetTypeName() const {
  return "IM.Login.IMKickPCClientRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Login
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Login::IMMsgServReq*
Arena::CreateMaybeMessage< ::IM::Login::IMMsgServReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMMsgServReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMMsgServRsp*
Arena::CreateMaybeMessage< ::IM::Login::IMMsgServRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMMsgServRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMLoginReq*
Arena::CreateMaybeMessage< ::IM::Login::IMLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMLoginRes*
Arena::CreateMaybeMessage< ::IM::Login::IMLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMLogoutReq*
Arena::CreateMaybeMessage< ::IM::Login::IMLogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMLogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMLogoutRsp*
Arena::CreateMaybeMessage< ::IM::Login::IMLogoutRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMLogoutRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMKickUser*
Arena::CreateMaybeMessage< ::IM::Login::IMKickUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMKickUser >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMDeviceTokenReq*
Arena::CreateMaybeMessage< ::IM::Login::IMDeviceTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMDeviceTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMDeviceTokenRsp*
Arena::CreateMaybeMessage< ::IM::Login::IMDeviceTokenRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMDeviceTokenRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMKickPCClientReq*
Arena::CreateMaybeMessage< ::IM::Login::IMKickPCClientReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMKickPCClientReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Login::IMKickPCClientRsp*
Arena::CreateMaybeMessage< ::IM::Login::IMKickPCClientRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Login::IMKickPCClientRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
