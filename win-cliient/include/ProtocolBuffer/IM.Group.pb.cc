// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

#include "IM.Group.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace IM {
namespace Group {
PROTOBUF_CONSTEXPR IMNormalGroupListReq::IMNormalGroupListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u} {}
struct IMNormalGroupListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMNormalGroupListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMNormalGroupListReqDefaultTypeInternal() {}
  union {
    IMNormalGroupListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMNormalGroupListReqDefaultTypeInternal _IMNormalGroupListReq_default_instance_;
PROTOBUF_CONSTEXPR IMNormalGroupListRsp::IMNormalGroupListRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_version_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u} {}
struct IMNormalGroupListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMNormalGroupListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMNormalGroupListRspDefaultTypeInternal() {}
  union {
    IMNormalGroupListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMNormalGroupListRspDefaultTypeInternal _IMNormalGroupListRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGroupInfoListReq::IMGroupInfoListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_version_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u} {}
struct IMGroupInfoListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupInfoListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupInfoListReqDefaultTypeInternal() {}
  union {
    IMGroupInfoListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupInfoListReqDefaultTypeInternal _IMGroupInfoListReq_default_instance_;
PROTOBUF_CONSTEXPR IMGroupInfoListRsp::IMGroupInfoListRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_info_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u} {}
struct IMGroupInfoListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupInfoListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupInfoListRspDefaultTypeInternal() {}
  union {
    IMGroupInfoListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupInfoListRspDefaultTypeInternal _IMGroupInfoListRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGroupCreateReq::IMGroupCreateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.member_id_list_)*/{}
  , /*decltype(_impl_._member_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.group_type_)*/0} {}
struct IMGroupCreateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupCreateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupCreateReqDefaultTypeInternal() {}
  union {
    IMGroupCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupCreateReqDefaultTypeInternal _IMGroupCreateReq_default_instance_;
PROTOBUF_CONSTEXPR IMGroupCreateRsp::IMGroupCreateRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_id_list_)*/{}
  , /*decltype(_impl_._user_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_.group_id_)*/0u} {}
struct IMGroupCreateRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupCreateRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupCreateRspDefaultTypeInternal() {}
  union {
    IMGroupCreateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupCreateRspDefaultTypeInternal _IMGroupCreateRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGroupChangeMemberReq::IMGroupChangeMemberReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.member_id_list_)*/{}
  , /*decltype(_impl_._member_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.group_id_)*/0u} {}
struct IMGroupChangeMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupChangeMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupChangeMemberReqDefaultTypeInternal() {}
  union {
    IMGroupChangeMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupChangeMemberReqDefaultTypeInternal _IMGroupChangeMemberReq_default_instance_;
PROTOBUF_CONSTEXPR IMGroupChangeMemberRsp::IMGroupChangeMemberRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cur_user_id_list_)*/{}
  , /*decltype(_impl_._cur_user_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chg_user_id_list_)*/{}
  , /*decltype(_impl_._chg_user_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_.group_id_)*/0u} {}
struct IMGroupChangeMemberRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupChangeMemberRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupChangeMemberRspDefaultTypeInternal() {}
  union {
    IMGroupChangeMemberRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupChangeMemberRspDefaultTypeInternal _IMGroupChangeMemberRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGroupShieldReq::IMGroupShieldReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.shield_status_)*/0u} {}
struct IMGroupShieldReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupShieldReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupShieldReqDefaultTypeInternal() {}
  union {
    IMGroupShieldReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupShieldReqDefaultTypeInternal _IMGroupShieldReq_default_instance_;
PROTOBUF_CONSTEXPR IMGroupShieldRsp::IMGroupShieldRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.result_code_)*/0u} {}
struct IMGroupShieldRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupShieldRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupShieldRspDefaultTypeInternal() {}
  union {
    IMGroupShieldRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupShieldRspDefaultTypeInternal _IMGroupShieldRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGroupChangeMemberNotify::IMGroupChangeMemberNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cur_user_id_list_)*/{}
  , /*decltype(_impl_._cur_user_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chg_user_id_list_)*/{}
  , /*decltype(_impl_._chg_user_id_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMGroupChangeMemberNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupChangeMemberNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupChangeMemberNotifyDefaultTypeInternal() {}
  union {
    IMGroupChangeMemberNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupChangeMemberNotifyDefaultTypeInternal _IMGroupChangeMemberNotify_default_instance_;
}  // namespace Group
}  // namespace IM
namespace IM {
namespace Group {

// ===================================================================

class IMNormalGroupListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMNormalGroupListReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMNormalGroupListReq::IMNormalGroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMNormalGroupListReq)
}
IMNormalGroupListReq::IMNormalGroupListReq(const IMNormalGroupListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMNormalGroupListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListReq)
}

inline void IMNormalGroupListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMNormalGroupListReq::~IMNormalGroupListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMNormalGroupListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void IMNormalGroupListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMNormalGroupListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMNormalGroupListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMNormalGroupListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMNormalGroupListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMNormalGroupListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMNormalGroupListReq)
  return target;
}

size_t IMNormalGroupListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMNormalGroupListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMNormalGroupListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMNormalGroupListReq*>(
      &from));
}

void IMNormalGroupListReq::MergeFrom(const IMNormalGroupListReq& from) {
  IMNormalGroupListReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMNormalGroupListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMNormalGroupListReq::CopyFrom(const IMNormalGroupListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMNormalGroupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListReq::IsInitialized() const {
  return true;
}

void IMNormalGroupListReq::InternalSwap(IMNormalGroupListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMNormalGroupListReq::GetTypeName() const {
  return "IM.Group.IMNormalGroupListReq";
}


// ===================================================================

class IMNormalGroupListRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMNormalGroupListRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void IMNormalGroupListRsp::clear_group_version_list() {
  _impl_.group_version_list_.Clear();
}
IMNormalGroupListRsp::IMNormalGroupListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMNormalGroupListRsp)
}
IMNormalGroupListRsp::IMNormalGroupListRsp(const IMNormalGroupListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMNormalGroupListRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){from._impl_.group_version_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMNormalGroupListRsp)
}

inline void IMNormalGroupListRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMNormalGroupListRsp::~IMNormalGroupListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMNormalGroupListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMNormalGroupListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_version_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void IMNormalGroupListRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMNormalGroupListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMNormalGroupListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_version_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMNormalGroupListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_version_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMNormalGroupListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMNormalGroupListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_version_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_version_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMNormalGroupListRsp)
  return target;
}

size_t IMNormalGroupListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMNormalGroupListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1UL * this->_internal_group_version_list_size();
  for (const auto& msg : this->_impl_.group_version_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMNormalGroupListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMNormalGroupListRsp*>(
      &from));
}

void IMNormalGroupListRsp::MergeFrom(const IMNormalGroupListRsp& from) {
  IMNormalGroupListRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMNormalGroupListRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_version_list_.MergeFrom(from._impl_.group_version_list_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMNormalGroupListRsp::CopyFrom(const IMNormalGroupListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMNormalGroupListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMNormalGroupListRsp::IsInitialized() const {
  return true;
}

void IMNormalGroupListRsp::InternalSwap(IMNormalGroupListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_version_list_.InternalSwap(&other->_impl_.group_version_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMNormalGroupListRsp::GetTypeName() const {
  return "IM.Group.IMNormalGroupListRsp";
}


// ===================================================================

class IMGroupInfoListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupInfoListReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void IMGroupInfoListReq::clear_group_version_list() {
  _impl_.group_version_list_.Clear();
}
IMGroupInfoListReq::IMGroupInfoListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupInfoListReq)
}
IMGroupInfoListReq::IMGroupInfoListReq(const IMGroupInfoListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupInfoListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){from._impl_.group_version_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListReq)
}

inline void IMGroupInfoListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupInfoListReq::~IMGroupInfoListReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupInfoListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_version_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void IMGroupInfoListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupInfoListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupInfoListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_version_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupInfoListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_version_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupInfoListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupInfoListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_version_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_version_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupInfoListReq)
  return target;
}

size_t IMGroupInfoListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupInfoListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1UL * this->_internal_group_version_list_size();
  for (const auto& msg : this->_impl_.group_version_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupInfoListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupInfoListReq*>(
      &from));
}

void IMGroupInfoListReq::MergeFrom(const IMGroupInfoListReq& from) {
  IMGroupInfoListReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupInfoListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_version_list_.MergeFrom(from._impl_.group_version_list_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupInfoListReq::CopyFrom(const IMGroupInfoListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupInfoListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListReq::IsInitialized() const {
  return true;
}

void IMGroupInfoListReq::InternalSwap(IMGroupInfoListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_version_list_.InternalSwap(&other->_impl_.group_version_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMGroupInfoListReq::GetTypeName() const {
  return "IM.Group.IMGroupInfoListReq";
}


// ===================================================================

class IMGroupInfoListRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupInfoListRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void IMGroupInfoListRsp::clear_group_info_list() {
  _impl_.group_info_list_.Clear();
}
IMGroupInfoListRsp::IMGroupInfoListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupInfoListRsp)
}
IMGroupInfoListRsp::IMGroupInfoListRsp(const IMGroupInfoListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupInfoListRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_info_list_){from._impl_.group_info_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupInfoListRsp)
}

inline void IMGroupInfoListRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_info_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupInfoListRsp::~IMGroupInfoListRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupInfoListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupInfoListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_info_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void IMGroupInfoListRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupInfoListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupInfoListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_info_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupInfoListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupInfoListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupInfoListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupInfoListRsp)
  return target;
}

size_t IMGroupInfoListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupInfoListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;
  total_size += 1UL * this->_internal_group_info_list_size();
  for (const auto& msg : this->_impl_.group_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupInfoListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupInfoListRsp*>(
      &from));
}

void IMGroupInfoListRsp::MergeFrom(const IMGroupInfoListRsp& from) {
  IMGroupInfoListRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupInfoListRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_info_list_.MergeFrom(from._impl_.group_info_list_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupInfoListRsp::CopyFrom(const IMGroupInfoListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupInfoListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupInfoListRsp::IsInitialized() const {
  return true;
}

void IMGroupInfoListRsp::InternalSwap(IMGroupInfoListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_info_list_.InternalSwap(&other->_impl_.group_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMGroupInfoListRsp::GetTypeName() const {
  return "IM.Group.IMGroupInfoListRsp";
}


// ===================================================================

class IMGroupCreateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupCreateReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGroupCreateReq::IMGroupCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupCreateReq)
}
IMGroupCreateReq::IMGroupCreateReq(const IMGroupCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupCreateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){from._impl_.member_id_list_}
    , /*decltype(_impl_._member_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.group_avatar_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    _this->_impl_.group_name_.Set(from._internal_group_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_avatar().empty()) {
    _this->_impl_.group_avatar_.Set(from._internal_group_avatar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_type_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateReq)
}

inline void IMGroupCreateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){arena}
    , /*decltype(_impl_._member_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.group_avatar_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.group_type_){0}
  };
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupCreateReq::~IMGroupCreateReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_id_list_.~RepeatedField();
  _impl_.group_name_.Destroy();
  _impl_.group_avatar_.Destroy();
  _impl_.attach_data_.Destroy();
}

void IMGroupCreateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_id_list_.Clear();
  _impl_.group_name_.ClearToEmpty();
  _impl_.group_avatar_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_type_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupCreateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.GroupType group_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_group_type(static_cast<::IM::BaseDefine::GroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // string group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string group_avatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_group_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 member_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.GroupType group_type = 2;
  if (this->_internal_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_group_type(), target);
  }

  // string group_name = 3;
  if (!this->_internal_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Group.IMGroupCreateReq.group_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_name(), target);
  }

  // string group_avatar = 4;
  if (!this->_internal_group_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_avatar().data(), static_cast<int>(this->_internal_group_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Group.IMGroupCreateReq.group_avatar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group_avatar(), target);
  }

  // repeated uint32 member_id_list = 5;
  {
    int byte_size = _impl_._member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_member_id_list(), byte_size, target);
    }
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupCreateReq)
  return target;
}

size_t IMGroupCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupCreateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_id_list = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string group_name = 3;
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // string group_avatar = 4;
  if (!this->_internal_group_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_avatar());
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.GroupType group_type = 2;
  if (this->_internal_group_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_group_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupCreateReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupCreateReq*>(
      &from));
}

void IMGroupCreateReq::MergeFrom(const IMGroupCreateReq& from) {
  IMGroupCreateReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupCreateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_id_list_.MergeFrom(from._impl_.member_id_list_);
  if (!from._internal_group_name().empty()) {
    _this->_internal_set_group_name(from._internal_group_name());
  }
  if (!from._internal_group_avatar().empty()) {
    _this->_internal_set_group_avatar(from._internal_group_avatar());
  }
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_type() != 0) {
    _this->_internal_set_group_type(from._internal_group_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupCreateReq::CopyFrom(const IMGroupCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateReq::IsInitialized() const {
  return true;
}

void IMGroupCreateReq::InternalSwap(IMGroupCreateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.member_id_list_.InternalSwap(&other->_impl_.member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_avatar_, lhs_arena,
      &other->_impl_.group_avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGroupCreateReq, _impl_.group_type_)
      + sizeof(IMGroupCreateReq::_impl_.group_type_)
      - PROTOBUF_FIELD_OFFSET(IMGroupCreateReq, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMGroupCreateReq::GetTypeName() const {
  return "IM.Group.IMGroupCreateReq";
}


// ===================================================================

class IMGroupCreateRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupCreateRsp>()._impl_._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGroupCreateRsp::IMGroupCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupCreateRsp)
}
IMGroupCreateRsp::IMGroupCreateRsp(const IMGroupCreateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupCreateRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_list_){from._impl_.user_id_list_}
    , /*decltype(_impl_._user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    _this->_impl_.group_name_.Set(from._internal_group_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupCreateRsp)
}

inline void IMGroupCreateRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_list_){arena}
    , /*decltype(_impl_._user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.result_code_){0u}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupCreateRsp::~IMGroupCreateRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupCreateRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupCreateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_list_.~RepeatedField();
  _impl_.group_name_.Destroy();
  _impl_.attach_data_.Destroy();
}

void IMGroupCreateRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupCreateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_list_.Clear();
  _impl_.group_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_code_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.result_code_));
  _impl_.group_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupCreateRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string group_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 user_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_user_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_user_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupCreateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupCreateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // optional uint32 group_id = 3;
  if (_internal_has_group_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_id(), target);
  }

  // string group_name = 4;
  if (!this->_internal_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Group.IMGroupCreateRsp.group_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group_name(), target);
  }

  // repeated uint32 user_id_list = 5;
  {
    int byte_size = _impl_._user_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_user_id_list(), byte_size, target);
    }
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupCreateRsp)
  return target;
}

size_t IMGroupCreateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupCreateRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 user_id_list = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.user_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._user_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string group_name = 4;
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupCreateRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupCreateRsp*>(
      &from));
}

void IMGroupCreateRsp::MergeFrom(const IMGroupCreateRsp& from) {
  IMGroupCreateRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupCreateRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_id_list_.MergeFrom(from._impl_.user_id_list_);
  if (!from._internal_group_name().empty()) {
    _this->_internal_set_group_name(from._internal_group_name());
  }
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (from._internal_has_group_id()) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupCreateRsp::CopyFrom(const IMGroupCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupCreateRsp::IsInitialized() const {
  return true;
}

void IMGroupCreateRsp::InternalSwap(IMGroupCreateRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_id_list_.InternalSwap(&other->_impl_.user_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGroupCreateRsp, _impl_.group_id_)
      + sizeof(IMGroupCreateRsp::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(IMGroupCreateRsp, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMGroupCreateRsp::GetTypeName() const {
  return "IM.Group.IMGroupCreateRsp";
}


// ===================================================================

class IMGroupChangeMemberReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupChangeMemberReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGroupChangeMemberReq::IMGroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupChangeMemberReq)
}
IMGroupChangeMemberReq::IMGroupChangeMemberReq(const IMGroupChangeMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupChangeMemberReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){from._impl_.member_id_list_}
    , /*decltype(_impl_._member_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberReq)
}

inline void IMGroupChangeMemberReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){arena}
    , /*decltype(_impl_._member_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupChangeMemberReq::~IMGroupChangeMemberReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupChangeMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_id_list_.~RepeatedField();
  _impl_.attach_data_.Destroy();
}

void IMGroupChangeMemberReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupChangeMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupChangeMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupChangeMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_change_type(static_cast<::IM::BaseDefine::GroupModifyType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 member_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupChangeMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupChangeMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  if (this->_internal_change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_change_type(), target);
  }

  // uint32 group_id = 3;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_id(), target);
  }

  // repeated uint32 member_id_list = 4;
  {
    int byte_size = _impl_._member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_member_id_list(), byte_size, target);
    }
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupChangeMemberReq)
  return target;
}

size_t IMGroupChangeMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupChangeMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_id_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  if (this->_internal_change_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  // uint32 group_id = 3;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupChangeMemberReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupChangeMemberReq*>(
      &from));
}

void IMGroupChangeMemberReq::MergeFrom(const IMGroupChangeMemberReq& from) {
  IMGroupChangeMemberReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupChangeMemberReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_id_list_.MergeFrom(from._impl_.member_id_list_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_change_type() != 0) {
    _this->_internal_set_change_type(from._internal_change_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupChangeMemberReq::CopyFrom(const IMGroupChangeMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupChangeMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberReq::IsInitialized() const {
  return true;
}

void IMGroupChangeMemberReq::InternalSwap(IMGroupChangeMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.member_id_list_.InternalSwap(&other->_impl_.member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGroupChangeMemberReq, _impl_.group_id_)
      + sizeof(IMGroupChangeMemberReq::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(IMGroupChangeMemberReq, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMGroupChangeMemberReq::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberReq";
}


// ===================================================================

class IMGroupChangeMemberRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupChangeMemberRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGroupChangeMemberRsp::IMGroupChangeMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupChangeMemberRsp)
}
IMGroupChangeMemberRsp::IMGroupChangeMemberRsp(const IMGroupChangeMemberRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupChangeMemberRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_user_id_list_){from._impl_.cur_user_id_list_}
    , /*decltype(_impl_._cur_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.chg_user_id_list_){from._impl_.chg_user_id_list_}
    , /*decltype(_impl_._chg_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberRsp)
}

inline void IMGroupChangeMemberRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_user_id_list_){arena}
    , /*decltype(_impl_._cur_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.chg_user_id_list_){arena}
    , /*decltype(_impl_._chg_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.result_code_){0u}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupChangeMemberRsp::~IMGroupChangeMemberRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupChangeMemberRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cur_user_id_list_.~RepeatedField();
  _impl_.chg_user_id_list_.~RepeatedField();
  _impl_.attach_data_.Destroy();
}

void IMGroupChangeMemberRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupChangeMemberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupChangeMemberRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cur_user_id_list_.Clear();
  _impl_.chg_user_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupChangeMemberRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_change_type(static_cast<::IM::BaseDefine::GroupModifyType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cur_user_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cur_user_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 chg_user_id_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chg_user_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupChangeMemberRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupChangeMemberRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  if (this->_internal_change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_change_type(), target);
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // uint32 group_id = 4;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_group_id(), target);
  }

  // repeated uint32 cur_user_id_list = 5;
  {
    int byte_size = _impl_._cur_user_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_cur_user_id_list(), byte_size, target);
    }
  }

  // repeated uint32 chg_user_id_list = 6;
  {
    int byte_size = _impl_._chg_user_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_chg_user_id_list(), byte_size, target);
    }
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupChangeMemberRsp)
  return target;
}

size_t IMGroupChangeMemberRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupChangeMemberRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cur_user_id_list = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cur_user_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cur_user_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 chg_user_id_list = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.chg_user_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chg_user_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  if (this->_internal_change_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  // uint32 group_id = 4;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupChangeMemberRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupChangeMemberRsp*>(
      &from));
}

void IMGroupChangeMemberRsp::MergeFrom(const IMGroupChangeMemberRsp& from) {
  IMGroupChangeMemberRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupChangeMemberRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cur_user_id_list_.MergeFrom(from._impl_.cur_user_id_list_);
  _this->_impl_.chg_user_id_list_.MergeFrom(from._impl_.chg_user_id_list_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_change_type() != 0) {
    _this->_internal_set_change_type(from._internal_change_type());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupChangeMemberRsp::CopyFrom(const IMGroupChangeMemberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupChangeMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberRsp::IsInitialized() const {
  return true;
}

void IMGroupChangeMemberRsp::InternalSwap(IMGroupChangeMemberRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cur_user_id_list_.InternalSwap(&other->_impl_.cur_user_id_list_);
  _impl_.chg_user_id_list_.InternalSwap(&other->_impl_.chg_user_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGroupChangeMemberRsp, _impl_.group_id_)
      + sizeof(IMGroupChangeMemberRsp::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(IMGroupChangeMemberRsp, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMGroupChangeMemberRsp::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberRsp";
}


// ===================================================================

class IMGroupShieldReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupShieldReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGroupShieldReq::IMGroupShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupShieldReq)
}
IMGroupShieldReq::IMGroupShieldReq(const IMGroupShieldReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupShieldReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.shield_status_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shield_status_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldReq)
}

inline void IMGroupShieldReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.shield_status_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupShieldReq::~IMGroupShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupShieldReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void IMGroupShieldReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupShieldReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shield_status_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.shield_status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupShieldReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shield_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.shield_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupShieldReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupShieldReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // uint32 shield_status = 3;
  if (this->_internal_shield_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shield_status(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupShieldReq)
  return target;
}

size_t IMGroupShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupShieldReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  // uint32 shield_status = 3;
  if (this->_internal_shield_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shield_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupShieldReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupShieldReq*>(
      &from));
}

void IMGroupShieldReq::MergeFrom(const IMGroupShieldReq& from) {
  IMGroupShieldReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupShieldReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_shield_status() != 0) {
    _this->_internal_set_shield_status(from._internal_shield_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupShieldReq::CopyFrom(const IMGroupShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldReq::IsInitialized() const {
  return true;
}

void IMGroupShieldReq::InternalSwap(IMGroupShieldReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGroupShieldReq, _impl_.shield_status_)
      + sizeof(IMGroupShieldReq::_impl_.shield_status_)
      - PROTOBUF_FIELD_OFFSET(IMGroupShieldReq, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMGroupShieldReq::GetTypeName() const {
  return "IM.Group.IMGroupShieldReq";
}


// ===================================================================

class IMGroupShieldRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupShieldRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGroupShieldRsp::IMGroupShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupShieldRsp)
}
IMGroupShieldRsp::IMGroupShieldRsp(const IMGroupShieldRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupShieldRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.result_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_code_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.result_code_));
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupShieldRsp)
}

inline void IMGroupShieldRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.result_code_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupShieldRsp::~IMGroupShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupShieldRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupShieldRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void IMGroupShieldRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupShieldRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_code_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.result_code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupShieldRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupShieldRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupShieldRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupShieldRsp)
  return target;
}

size_t IMGroupShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupShieldRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupShieldRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupShieldRsp*>(
      &from));
}

void IMGroupShieldRsp::MergeFrom(const IMGroupShieldRsp& from) {
  IMGroupShieldRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupShieldRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupShieldRsp::CopyFrom(const IMGroupShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupShieldRsp::IsInitialized() const {
  return true;
}

void IMGroupShieldRsp::InternalSwap(IMGroupShieldRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGroupShieldRsp, _impl_.result_code_)
      + sizeof(IMGroupShieldRsp::_impl_.result_code_)
      - PROTOBUF_FIELD_OFFSET(IMGroupShieldRsp, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMGroupShieldRsp::GetTypeName() const {
  return "IM.Group.IMGroupShieldRsp";
}


// ===================================================================

class IMGroupChangeMemberNotify::_Internal {
 public:
};

IMGroupChangeMemberNotify::IMGroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Group.IMGroupChangeMemberNotify)
}
IMGroupChangeMemberNotify::IMGroupChangeMemberNotify(const IMGroupChangeMemberNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupChangeMemberNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_user_id_list_){from._impl_.cur_user_id_list_}
    , /*decltype(_impl_._cur_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.chg_user_id_list_){from._impl_.chg_user_id_list_}
    , /*decltype(_impl_._chg_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.group_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Group.IMGroupChangeMemberNotify)
}

inline void IMGroupChangeMemberNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_user_id_list_){arena}
    , /*decltype(_impl_._cur_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.chg_user_id_list_){arena}
    , /*decltype(_impl_._chg_user_id_list_cached_byte_size_)*/{0}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.group_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMGroupChangeMemberNotify::~IMGroupChangeMemberNotify() {
  // @@protoc_insertion_point(destructor:IM.Group.IMGroupChangeMemberNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupChangeMemberNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cur_user_id_list_.~RepeatedField();
  _impl_.chg_user_id_list_.~RepeatedField();
}

void IMGroupChangeMemberNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupChangeMemberNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Group.IMGroupChangeMemberNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cur_user_id_list_.Clear();
  _impl_.chg_user_id_list_.Clear();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupChangeMemberNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.GroupModifyType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_change_type(static_cast<::IM::BaseDefine::GroupModifyType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cur_user_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cur_user_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_cur_user_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 chg_user_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chg_user_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_chg_user_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupChangeMemberNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Group.IMGroupChangeMemberNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  if (this->_internal_change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_change_type(), target);
  }

  // uint32 group_id = 3;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_id(), target);
  }

  // repeated uint32 cur_user_id_list = 4;
  {
    int byte_size = _impl_._cur_user_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_cur_user_id_list(), byte_size, target);
    }
  }

  // repeated uint32 chg_user_id_list = 5;
  {
    int byte_size = _impl_._chg_user_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_chg_user_id_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Group.IMGroupChangeMemberNotify)
  return target;
}

size_t IMGroupChangeMemberNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Group.IMGroupChangeMemberNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cur_user_id_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cur_user_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cur_user_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 chg_user_id_list = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.chg_user_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chg_user_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.GroupModifyType change_type = 2;
  if (this->_internal_change_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  // uint32 group_id = 3;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupChangeMemberNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupChangeMemberNotify*>(
      &from));
}

void IMGroupChangeMemberNotify::MergeFrom(const IMGroupChangeMemberNotify& from) {
  IMGroupChangeMemberNotify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Group.IMGroupChangeMemberNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cur_user_id_list_.MergeFrom(from._impl_.cur_user_id_list_);
  _this->_impl_.chg_user_id_list_.MergeFrom(from._impl_.chg_user_id_list_);
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_change_type() != 0) {
    _this->_internal_set_change_type(from._internal_change_type());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupChangeMemberNotify::CopyFrom(const IMGroupChangeMemberNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Group.IMGroupChangeMemberNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupChangeMemberNotify::IsInitialized() const {
  return true;
}

void IMGroupChangeMemberNotify::InternalSwap(IMGroupChangeMemberNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cur_user_id_list_.InternalSwap(&other->_impl_.cur_user_id_list_);
  _impl_.chg_user_id_list_.InternalSwap(&other->_impl_.chg_user_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGroupChangeMemberNotify, _impl_.group_id_)
      + sizeof(IMGroupChangeMemberNotify::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(IMGroupChangeMemberNotify, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMGroupChangeMemberNotify::GetTypeName() const {
  return "IM.Group.IMGroupChangeMemberNotify";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Group
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Group::IMNormalGroupListReq*
Arena::CreateMaybeMessage< ::IM::Group::IMNormalGroupListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMNormalGroupListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMNormalGroupListRsp*
Arena::CreateMaybeMessage< ::IM::Group::IMNormalGroupListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMNormalGroupListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupInfoListReq*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupInfoListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupInfoListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupInfoListRsp*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupInfoListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupInfoListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupCreateReq*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupCreateRsp*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupCreateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupCreateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupChangeMemberReq*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupChangeMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupChangeMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupChangeMemberRsp*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupChangeMemberRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupChangeMemberRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupShieldReq*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupShieldReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupShieldReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupShieldRsp*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupShieldRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupShieldRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Group::IMGroupChangeMemberNotify*
Arena::CreateMaybeMessage< ::IM::Group::IMGroupChangeMemberNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Group::IMGroupChangeMemberNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
