// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

#include "IM.Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace IM {
namespace Server {
PROTOBUF_CONSTEXPR IMStopReceivePacket::IMStopReceivePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMStopReceivePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMStopReceivePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMStopReceivePacketDefaultTypeInternal() {}
  union {
    IMStopReceivePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMStopReceivePacketDefaultTypeInternal _IMStopReceivePacket_default_instance_;
PROTOBUF_CONSTEXPR IMValidateReq::IMValidateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct IMValidateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMValidateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMValidateReqDefaultTypeInternal() {}
  union {
    IMValidateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMValidateReqDefaultTypeInternal _IMValidateReq_default_instance_;
PROTOBUF_CONSTEXPR IMValidateRsp::IMValidateRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_info_)*/nullptr
  , /*decltype(_impl_.result_code_)*/0u} {}
struct IMValidateRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMValidateRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMValidateRspDefaultTypeInternal() {}
  union {
    IMValidateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMValidateRspDefaultTypeInternal _IMValidateRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGetDeviceTokenReq::IMGetDeviceTokenReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_id_)*/{}
  , /*decltype(_impl_._user_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct IMGetDeviceTokenReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGetDeviceTokenReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGetDeviceTokenReqDefaultTypeInternal() {}
  union {
    IMGetDeviceTokenReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGetDeviceTokenReqDefaultTypeInternal _IMGetDeviceTokenReq_default_instance_;
PROTOBUF_CONSTEXPR IMGetDeviceTokenRsp::IMGetDeviceTokenRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_token_info_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct IMGetDeviceTokenRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGetDeviceTokenRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGetDeviceTokenRspDefaultTypeInternal() {}
  union {
    IMGetDeviceTokenRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGetDeviceTokenRspDefaultTypeInternal _IMGetDeviceTokenRsp_default_instance_;
PROTOBUF_CONSTEXPR IMRoleSet::IMRoleSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.master_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMRoleSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMRoleSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMRoleSetDefaultTypeInternal() {}
  union {
    IMRoleSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMRoleSetDefaultTypeInternal _IMRoleSet_default_instance_;
PROTOBUF_CONSTEXPR IMOnlineUserInfo::IMOnlineUserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_stat_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMOnlineUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMOnlineUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMOnlineUserInfoDefaultTypeInternal() {}
  union {
    IMOnlineUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMOnlineUserInfoDefaultTypeInternal _IMOnlineUserInfo_default_instance_;
PROTOBUF_CONSTEXPR IMMsgServInfo::IMMsgServInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.max_conn_cnt_)*/0u
  , /*decltype(_impl_.cur_conn_cnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMMsgServInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMMsgServInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMMsgServInfoDefaultTypeInternal() {}
  union {
    IMMsgServInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMMsgServInfoDefaultTypeInternal _IMMsgServInfo_default_instance_;
PROTOBUF_CONSTEXPR IMUserStatusUpdate::IMUserStatusUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_status_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.client_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMUserStatusUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUserStatusUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUserStatusUpdateDefaultTypeInternal() {}
  union {
    IMUserStatusUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUserStatusUpdateDefaultTypeInternal _IMUserStatusUpdate_default_instance_;
PROTOBUF_CONSTEXPR IMUserCntUpdate::IMUserCntUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_action_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMUserCntUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUserCntUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUserCntUpdateDefaultTypeInternal() {}
  union {
    IMUserCntUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUserCntUpdateDefaultTypeInternal _IMUserCntUpdate_default_instance_;
PROTOBUF_CONSTEXPR IMServerKickUser::IMServerKickUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.client_type_)*/0
  , /*decltype(_impl_.reason_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMServerKickUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMServerKickUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMServerKickUserDefaultTypeInternal() {}
  union {
    IMServerKickUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMServerKickUserDefaultTypeInternal _IMServerKickUser_default_instance_;
PROTOBUF_CONSTEXPR IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMServerPCLoginStatusNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMServerPCLoginStatusNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMServerPCLoginStatusNotifyDefaultTypeInternal() {}
  union {
    IMServerPCLoginStatusNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMServerPCLoginStatusNotifyDefaultTypeInternal _IMServerPCLoginStatusNotify_default_instance_;
PROTOBUF_CONSTEXPR IMPushToUserReq::IMPushToUserReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_token_list_)*/{}
  , /*decltype(_impl_.flash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMPushToUserReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMPushToUserReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMPushToUserReqDefaultTypeInternal() {}
  union {
    IMPushToUserReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMPushToUserReqDefaultTypeInternal _IMPushToUserReq_default_instance_;
PROTOBUF_CONSTEXPR IMPushToUserRsp::IMPushToUserRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.push_result_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMPushToUserRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMPushToUserRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMPushToUserRspDefaultTypeInternal() {}
  union {
    IMPushToUserRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMPushToUserRspDefaultTypeInternal _IMPushToUserRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGroupGetShieldReq::IMGroupGetShieldReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_id_)*/{}
  , /*decltype(_impl_._user_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0u} {}
struct IMGroupGetShieldReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupGetShieldReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupGetShieldReqDefaultTypeInternal() {}
  union {
    IMGroupGetShieldReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupGetShieldReqDefaultTypeInternal _IMGroupGetShieldReq_default_instance_;
PROTOBUF_CONSTEXPR IMGroupGetShieldRsp::IMGroupGetShieldRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shield_status_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0u} {}
struct IMGroupGetShieldRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGroupGetShieldRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGroupGetShieldRspDefaultTypeInternal() {}
  union {
    IMGroupGetShieldRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGroupGetShieldRspDefaultTypeInternal _IMGroupGetShieldRsp_default_instance_;
PROTOBUF_CONSTEXPR IMFileTransferReq::IMFileTransferReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_user_id_)*/0u
  , /*decltype(_impl_.to_user_id_)*/0u
  , /*decltype(_impl_.file_size_)*/0u
  , /*decltype(_impl_.trans_mode_)*/0} {}
struct IMFileTransferReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileTransferReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileTransferReqDefaultTypeInternal() {}
  union {
    IMFileTransferReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileTransferReqDefaultTypeInternal _IMFileTransferReq_default_instance_;
PROTOBUF_CONSTEXPR IMFileTransferRsp::IMFileTransferRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_.from_user_id_)*/0u
  , /*decltype(_impl_.to_user_id_)*/0u
  , /*decltype(_impl_.file_size_)*/0u
  , /*decltype(_impl_.trans_mode_)*/0} {}
struct IMFileTransferRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileTransferRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileTransferRspDefaultTypeInternal() {}
  union {
    IMFileTransferRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileTransferRspDefaultTypeInternal _IMFileTransferRsp_default_instance_;
PROTOBUF_CONSTEXPR IMFileServerIPReq::IMFileServerIPReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileServerIPReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileServerIPReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileServerIPReqDefaultTypeInternal() {}
  union {
    IMFileServerIPReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileServerIPReqDefaultTypeInternal _IMFileServerIPReq_default_instance_;
PROTOBUF_CONSTEXPR IMFileServerIPRsp::IMFileServerIPRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_addr_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileServerIPRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileServerIPRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileServerIPRspDefaultTypeInternal() {}
  union {
    IMFileServerIPRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileServerIPRspDefaultTypeInternal _IMFileServerIPRsp_default_instance_;
}  // namespace Server
}  // namespace IM
namespace IM {
namespace Server {

// ===================================================================

class IMStopReceivePacket::_Internal {
 public:
};

IMStopReceivePacket::IMStopReceivePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMStopReceivePacket)
}
IMStopReceivePacket::IMStopReceivePacket(const IMStopReceivePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMStopReceivePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMStopReceivePacket)
}

inline void IMStopReceivePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMStopReceivePacket::~IMStopReceivePacket() {
  // @@protoc_insertion_point(destructor:IM.Server.IMStopReceivePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMStopReceivePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMStopReceivePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMStopReceivePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMStopReceivePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMStopReceivePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMStopReceivePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMStopReceivePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMStopReceivePacket)
  return target;
}

size_t IMStopReceivePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMStopReceivePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMStopReceivePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMStopReceivePacket*>(
      &from));
}

void IMStopReceivePacket::MergeFrom(const IMStopReceivePacket& from) {
  IMStopReceivePacket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMStopReceivePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMStopReceivePacket::CopyFrom(const IMStopReceivePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMStopReceivePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMStopReceivePacket::IsInitialized() const {
  return true;
}

void IMStopReceivePacket::InternalSwap(IMStopReceivePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

std::string IMStopReceivePacket::GetTypeName() const {
  return "IM.Server.IMStopReceivePacket";
}


// ===================================================================

class IMValidateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMValidateReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMValidateReq::IMValidateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMValidateReq)
}
IMValidateReq::IMValidateReq(const IMValidateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMValidateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMValidateReq)
}

inline void IMValidateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMValidateReq::~IMValidateReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMValidateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMValidateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
  _impl_.password_.Destroy();
  _impl_.attach_data_.Destroy();
}

void IMValidateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMValidateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMValidateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMValidateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMValidateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMValidateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateReq.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateReq.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMValidateReq)
  return target;
}

size_t IMValidateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMValidateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMValidateReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMValidateReq*>(
      &from));
}

void IMValidateReq::MergeFrom(const IMValidateReq& from) {
  IMValidateReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMValidateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMValidateReq::CopyFrom(const IMValidateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMValidateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMValidateReq::IsInitialized() const {
  return true;
}

void IMValidateReq::InternalSwap(IMValidateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string IMValidateReq::GetTypeName() const {
  return "IM.Server.IMValidateReq";
}


// ===================================================================

class IMValidateRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMValidateRsp>()._impl_._has_bits_);
  static void set_has_result_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::IM::BaseDefine::UserInfo& user_info(const IMValidateRsp* msg);
  static void set_has_user_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::IM::BaseDefine::UserInfo&
IMValidateRsp::_Internal::user_info(const IMValidateRsp* msg) {
  return *msg->_impl_.user_info_;
}
void IMValidateRsp::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
IMValidateRsp::IMValidateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMValidateRsp)
}
IMValidateRsp::IMValidateRsp(const IMValidateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMValidateRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.result_string_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.result_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_result_string()) {
    _this->_impl_.result_string_.Set(from._internal_result_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    _this->_impl_.user_info_ = new ::IM::BaseDefine::UserInfo(*from._impl_.user_info_);
  }
  _this->_impl_.result_code_ = from._impl_.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMValidateRsp)
}

inline void IMValidateRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.result_string_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_info_){nullptr}
    , decltype(_impl_.result_code_){0u}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMValidateRsp::~IMValidateRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMValidateRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMValidateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
  _impl_.result_string_.Destroy();
  _impl_.attach_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_info_;
}

void IMValidateRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMValidateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMValidateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.result_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.user_info_ != nullptr);
      _impl_.user_info_->Clear();
    }
  }
  _impl_.result_code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMValidateRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional .IM.BaseDefine.UserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMValidateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMValidateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateRsp.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // optional string result_string = 3;
  if (_internal_has_result_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateRsp.result_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // optional .IM.BaseDefine.UserInfo user_info = 4;
  if (_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMValidateRsp)
  return target;
}

size_t IMValidateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMValidateRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string result_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_result_string());
    }

    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

    // optional .IM.BaseDefine.UserInfo user_info = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_info_);
    }

  }
  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMValidateRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMValidateRsp*>(
      &from));
}

void IMValidateRsp::MergeFrom(const IMValidateRsp& from) {
  IMValidateRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMValidateRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_result_string(from._internal_result_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(
          from._internal_user_info());
    }
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMValidateRsp::CopyFrom(const IMValidateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMValidateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMValidateRsp::IsInitialized() const {
  return true;
}

void IMValidateRsp::InternalSwap(IMValidateRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_string_, lhs_arena,
      &other->_impl_.result_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMValidateRsp, _impl_.result_code_)
      + sizeof(IMValidateRsp::_impl_.result_code_)
      - PROTOBUF_FIELD_OFFSET(IMValidateRsp, _impl_.user_info_)>(
          reinterpret_cast<char*>(&_impl_.user_info_),
          reinterpret_cast<char*>(&other->_impl_.user_info_));
}

std::string IMValidateRsp::GetTypeName() const {
  return "IM.Server.IMValidateRsp";
}


// ===================================================================

class IMGetDeviceTokenReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGetDeviceTokenReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGetDeviceTokenReq::IMGetDeviceTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGetDeviceTokenReq)
}
IMGetDeviceTokenReq::IMGetDeviceTokenReq(const IMGetDeviceTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGetDeviceTokenReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){from._impl_.user_id_}
    , /*decltype(_impl_._user_id_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGetDeviceTokenReq)
}

inline void IMGetDeviceTokenReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){arena}
    , /*decltype(_impl_._user_id_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGetDeviceTokenReq::~IMGetDeviceTokenReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGetDeviceTokenReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGetDeviceTokenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.~RepeatedField();
  _impl_.attach_data_.Destroy();
}

void IMGetDeviceTokenReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGetDeviceTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGetDeviceTokenReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetDeviceTokenReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetDeviceTokenReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGetDeviceTokenReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 user_id = 1;
  {
    int byte_size = _impl_._user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_user_id(), byte_size, target);
    }
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGetDeviceTokenReq)
  return target;
}

size_t IMGetDeviceTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGetDeviceTokenReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 user_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetDeviceTokenReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGetDeviceTokenReq*>(
      &from));
}

void IMGetDeviceTokenReq::MergeFrom(const IMGetDeviceTokenReq& from) {
  IMGetDeviceTokenReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGetDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_id_.MergeFrom(from._impl_.user_id_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetDeviceTokenReq::CopyFrom(const IMGetDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGetDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetDeviceTokenReq::IsInitialized() const {
  return true;
}

void IMGetDeviceTokenReq::InternalSwap(IMGetDeviceTokenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_id_.InternalSwap(&other->_impl_.user_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string IMGetDeviceTokenReq::GetTypeName() const {
  return "IM.Server.IMGetDeviceTokenReq";
}


// ===================================================================

class IMGetDeviceTokenRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGetDeviceTokenRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void IMGetDeviceTokenRsp::clear_user_token_info() {
  _impl_.user_token_info_.Clear();
}
IMGetDeviceTokenRsp::IMGetDeviceTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGetDeviceTokenRsp)
}
IMGetDeviceTokenRsp::IMGetDeviceTokenRsp(const IMGetDeviceTokenRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGetDeviceTokenRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_token_info_){from._impl_.user_token_info_}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGetDeviceTokenRsp)
}

inline void IMGetDeviceTokenRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_token_info_){arena}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGetDeviceTokenRsp::~IMGetDeviceTokenRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGetDeviceTokenRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGetDeviceTokenRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_token_info_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void IMGetDeviceTokenRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGetDeviceTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGetDeviceTokenRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_token_info_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetDeviceTokenRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_token_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetDeviceTokenRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGetDeviceTokenRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_token_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_token_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGetDeviceTokenRsp)
  return target;
}

size_t IMGetDeviceTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGetDeviceTokenRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  total_size += 1UL * this->_internal_user_token_info_size();
  for (const auto& msg : this->_impl_.user_token_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetDeviceTokenRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGetDeviceTokenRsp*>(
      &from));
}

void IMGetDeviceTokenRsp::MergeFrom(const IMGetDeviceTokenRsp& from) {
  IMGetDeviceTokenRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGetDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_token_info_.MergeFrom(from._impl_.user_token_info_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetDeviceTokenRsp::CopyFrom(const IMGetDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGetDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetDeviceTokenRsp::IsInitialized() const {
  return true;
}

void IMGetDeviceTokenRsp::InternalSwap(IMGetDeviceTokenRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_token_info_.InternalSwap(&other->_impl_.user_token_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string IMGetDeviceTokenRsp::GetTypeName() const {
  return "IM.Server.IMGetDeviceTokenRsp";
}


// ===================================================================

class IMRoleSet::_Internal {
 public:
};

IMRoleSet::IMRoleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMRoleSet)
}
IMRoleSet::IMRoleSet(const IMRoleSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMRoleSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.master_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.master_ = from._impl_.master_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMRoleSet)
}

inline void IMRoleSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.master_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMRoleSet::~IMRoleSet() {
  // @@protoc_insertion_point(destructor:IM.Server.IMRoleSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMRoleSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMRoleSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMRoleSet::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMRoleSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.master_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMRoleSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMRoleSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMRoleSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->_internal_master() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_master(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMRoleSet)
  return target;
}

size_t IMRoleSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMRoleSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->_internal_master() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_master());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMRoleSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMRoleSet*>(
      &from));
}

void IMRoleSet::MergeFrom(const IMRoleSet& from) {
  IMRoleSet* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMRoleSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_master() != 0) {
    _this->_internal_set_master(from._internal_master());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMRoleSet::CopyFrom(const IMRoleSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMRoleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRoleSet::IsInitialized() const {
  return true;
}

void IMRoleSet::InternalSwap(IMRoleSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.master_, other->_impl_.master_);
}

std::string IMRoleSet::GetTypeName() const {
  return "IM.Server.IMRoleSet";
}


// ===================================================================

class IMOnlineUserInfo::_Internal {
 public:
};

void IMOnlineUserInfo::clear_user_stat_list() {
  _impl_.user_stat_list_.Clear();
}
IMOnlineUserInfo::IMOnlineUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMOnlineUserInfo)
}
IMOnlineUserInfo::IMOnlineUserInfo(const IMOnlineUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMOnlineUserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_stat_list_){from._impl_.user_stat_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMOnlineUserInfo)
}

inline void IMOnlineUserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_stat_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMOnlineUserInfo::~IMOnlineUserInfo() {
  // @@protoc_insertion_point(destructor:IM.Server.IMOnlineUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMOnlineUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_stat_list_.~RepeatedPtrField();
}

void IMOnlineUserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMOnlineUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMOnlineUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_stat_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMOnlineUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_stat_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMOnlineUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMOnlineUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_stat_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_stat_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMOnlineUserInfo)
  return target;
}

size_t IMOnlineUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMOnlineUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  total_size += 1UL * this->_internal_user_stat_list_size();
  for (const auto& msg : this->_impl_.user_stat_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMOnlineUserInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMOnlineUserInfo*>(
      &from));
}

void IMOnlineUserInfo::MergeFrom(const IMOnlineUserInfo& from) {
  IMOnlineUserInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMOnlineUserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_stat_list_.MergeFrom(from._impl_.user_stat_list_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMOnlineUserInfo::CopyFrom(const IMOnlineUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMOnlineUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMOnlineUserInfo::IsInitialized() const {
  return true;
}

void IMOnlineUserInfo::InternalSwap(IMOnlineUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_stat_list_.InternalSwap(&other->_impl_.user_stat_list_);
}

std::string IMOnlineUserInfo::GetTypeName() const {
  return "IM.Server.IMOnlineUserInfo";
}


// ===================================================================

class IMMsgServInfo::_Internal {
 public:
};

IMMsgServInfo::IMMsgServInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMMsgServInfo)
}
IMMsgServInfo::IMMsgServInfo(const IMMsgServInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMMsgServInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip1_){}
    , decltype(_impl_.ip2_){}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.max_conn_cnt_){}
    , decltype(_impl_.cur_conn_cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.ip1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip1().empty()) {
    _this->_impl_.ip1_.Set(from._internal_ip1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip2().empty()) {
    _this->_impl_.ip2_.Set(from._internal_ip2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    _this->_impl_.host_name_.Set(from._internal_host_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cur_conn_cnt_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.cur_conn_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMMsgServInfo)
}

inline void IMMsgServInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip1_){}
    , decltype(_impl_.ip2_){}
    , decltype(_impl_.host_name_){}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.max_conn_cnt_){0u}
    , decltype(_impl_.cur_conn_cnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMMsgServInfo::~IMMsgServInfo() {
  // @@protoc_insertion_point(destructor:IM.Server.IMMsgServInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMMsgServInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip1_.Destroy();
  _impl_.ip2_.Destroy();
  _impl_.host_name_.Destroy();
}

void IMMsgServInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMMsgServInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMMsgServInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip1_.ClearToEmpty();
  _impl_.ip2_.ClearToEmpty();
  _impl_.host_name_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cur_conn_cnt_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.cur_conn_cnt_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgServInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string ip2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_conn_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_conn_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cur_conn_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cur_conn_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string host_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgServInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMMsgServInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip1 = 1;
  if (!this->_internal_ip1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip1().data(), static_cast<int>(this->_internal_ip1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.ip1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip1(), target);
  }

  // string ip2 = 2;
  if (!this->_internal_ip2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip2().data(), static_cast<int>(this->_internal_ip2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.ip2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip2(), target);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // uint32 max_conn_cnt = 4;
  if (this->_internal_max_conn_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_conn_cnt(), target);
  }

  // uint32 cur_conn_cnt = 5;
  if (this->_internal_cur_conn_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cur_conn_cnt(), target);
  }

  // string host_name = 6;
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.host_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_host_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMMsgServInfo)
  return target;
}

size_t IMMsgServInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMMsgServInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip1 = 1;
  if (!this->_internal_ip1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip1());
  }

  // string ip2 = 2;
  if (!this->_internal_ip2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip2());
  }

  // string host_name = 6;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 max_conn_cnt = 4;
  if (this->_internal_max_conn_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_conn_cnt());
  }

  // uint32 cur_conn_cnt = 5;
  if (this->_internal_cur_conn_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cur_conn_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgServInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMMsgServInfo*>(
      &from));
}

void IMMsgServInfo::MergeFrom(const IMMsgServInfo& from) {
  IMMsgServInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMMsgServInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip1().empty()) {
    _this->_internal_set_ip1(from._internal_ip1());
  }
  if (!from._internal_ip2().empty()) {
    _this->_internal_set_ip2(from._internal_ip2());
  }
  if (!from._internal_host_name().empty()) {
    _this->_internal_set_host_name(from._internal_host_name());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_max_conn_cnt() != 0) {
    _this->_internal_set_max_conn_cnt(from._internal_max_conn_cnt());
  }
  if (from._internal_cur_conn_cnt() != 0) {
    _this->_internal_set_cur_conn_cnt(from._internal_cur_conn_cnt());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgServInfo::CopyFrom(const IMMsgServInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMMsgServInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServInfo::IsInitialized() const {
  return true;
}

void IMMsgServInfo::InternalSwap(IMMsgServInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip1_, lhs_arena,
      &other->_impl_.ip1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip2_, lhs_arena,
      &other->_impl_.ip2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgServInfo, _impl_.cur_conn_cnt_)
      + sizeof(IMMsgServInfo::_impl_.cur_conn_cnt_)
      - PROTOBUF_FIELD_OFFSET(IMMsgServInfo, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

std::string IMMsgServInfo::GetTypeName() const {
  return "IM.Server.IMMsgServInfo";
}


// ===================================================================

class IMUserStatusUpdate::_Internal {
 public:
};

IMUserStatusUpdate::IMUserStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMUserStatusUpdate)
}
IMUserStatusUpdate::IMUserStatusUpdate(const IMUserStatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMUserStatusUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_status_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.client_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_status_, &from._impl_.user_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_type_) -
    reinterpret_cast<char*>(&_impl_.user_status_)) + sizeof(_impl_.client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMUserStatusUpdate)
}

inline void IMUserStatusUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_status_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.client_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMUserStatusUpdate::~IMUserStatusUpdate() {
  // @@protoc_insertion_point(destructor:IM.Server.IMUserStatusUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUserStatusUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUserStatusUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMUserStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMUserStatusUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.client_type_) -
      reinterpret_cast<char*>(&_impl_.user_status_)) + sizeof(_impl_.client_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMUserStatusUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.ClientType client_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::IM::BaseDefine::ClientType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUserStatusUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMUserStatusUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_status = 1;
  if (this->_internal_user_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_status(), target);
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->_internal_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_client_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMUserStatusUpdate)
  return target;
}

size_t IMUserStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMUserStatusUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_status = 1;
  if (this->_internal_user_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_status());
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->_internal_client_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUserStatusUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMUserStatusUpdate*>(
      &from));
}

void IMUserStatusUpdate::MergeFrom(const IMUserStatusUpdate& from) {
  IMUserStatusUpdate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMUserStatusUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_status() != 0) {
    _this->_internal_set_user_status(from._internal_user_status());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_client_type() != 0) {
    _this->_internal_set_client_type(from._internal_client_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMUserStatusUpdate::CopyFrom(const IMUserStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMUserStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserStatusUpdate::IsInitialized() const {
  return true;
}

void IMUserStatusUpdate::InternalSwap(IMUserStatusUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUserStatusUpdate, _impl_.client_type_)
      + sizeof(IMUserStatusUpdate::_impl_.client_type_)
      - PROTOBUF_FIELD_OFFSET(IMUserStatusUpdate, _impl_.user_status_)>(
          reinterpret_cast<char*>(&_impl_.user_status_),
          reinterpret_cast<char*>(&other->_impl_.user_status_));
}

std::string IMUserStatusUpdate::GetTypeName() const {
  return "IM.Server.IMUserStatusUpdate";
}


// ===================================================================

class IMUserCntUpdate::_Internal {
 public:
};

IMUserCntUpdate::IMUserCntUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMUserCntUpdate)
}
IMUserCntUpdate::IMUserCntUpdate(const IMUserCntUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMUserCntUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_action_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_action_, &from._impl_.user_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.user_action_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMUserCntUpdate)
}

inline void IMUserCntUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_action_){0u}
    , decltype(_impl_.user_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMUserCntUpdate::~IMUserCntUpdate() {
  // @@protoc_insertion_point(destructor:IM.Server.IMUserCntUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUserCntUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUserCntUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMUserCntUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMUserCntUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.user_action_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMUserCntUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUserCntUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMUserCntUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_action = 1;
  if (this->_internal_user_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_action(), target);
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMUserCntUpdate)
  return target;
}

size_t IMUserCntUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMUserCntUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_action = 1;
  if (this->_internal_user_action() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_action());
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUserCntUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMUserCntUpdate*>(
      &from));
}

void IMUserCntUpdate::MergeFrom(const IMUserCntUpdate& from) {
  IMUserCntUpdate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMUserCntUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_action() != 0) {
    _this->_internal_set_user_action(from._internal_user_action());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMUserCntUpdate::CopyFrom(const IMUserCntUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMUserCntUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserCntUpdate::IsInitialized() const {
  return true;
}

void IMUserCntUpdate::InternalSwap(IMUserCntUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUserCntUpdate, _impl_.user_id_)
      + sizeof(IMUserCntUpdate::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(IMUserCntUpdate, _impl_.user_action_)>(
          reinterpret_cast<char*>(&_impl_.user_action_),
          reinterpret_cast<char*>(&other->_impl_.user_action_));
}

std::string IMUserCntUpdate::GetTypeName() const {
  return "IM.Server.IMUserCntUpdate";
}


// ===================================================================

class IMServerKickUser::_Internal {
 public:
};

IMServerKickUser::IMServerKickUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMServerKickUser)
}
IMServerKickUser::IMServerKickUser(const IMServerKickUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMServerKickUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.client_type_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMServerKickUser)
}

inline void IMServerKickUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){0u}
    , decltype(_impl_.client_type_){0}
    , decltype(_impl_.reason_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMServerKickUser::~IMServerKickUser() {
  // @@protoc_insertion_point(destructor:IM.Server.IMServerKickUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMServerKickUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMServerKickUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMServerKickUser::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMServerKickUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMServerKickUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.ClientType client_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::IM::BaseDefine::ClientType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMServerKickUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMServerKickUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 2;
  if (this->_internal_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_client_type(), target);
  }

  // uint32 reason = 3;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMServerKickUser)
  return target;
}

size_t IMServerKickUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMServerKickUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.ClientType client_type = 2;
  if (this->_internal_client_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  // uint32 reason = 3;
  if (this->_internal_reason() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMServerKickUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMServerKickUser*>(
      &from));
}

void IMServerKickUser::MergeFrom(const IMServerKickUser& from) {
  IMServerKickUser* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMServerKickUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_client_type() != 0) {
    _this->_internal_set_client_type(from._internal_client_type());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMServerKickUser::CopyFrom(const IMServerKickUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMServerKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMServerKickUser::IsInitialized() const {
  return true;
}

void IMServerKickUser::InternalSwap(IMServerKickUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMServerKickUser, _impl_.reason_)
      + sizeof(IMServerKickUser::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(IMServerKickUser, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMServerKickUser::GetTypeName() const {
  return "IM.Server.IMServerKickUser";
}


// ===================================================================

class IMServerPCLoginStatusNotify::_Internal {
 public:
};

IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMServerPCLoginStatusNotify)
}
IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify(const IMServerPCLoginStatusNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMServerPCLoginStatusNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.login_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_status_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.login_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMServerPCLoginStatusNotify)
}

inline void IMServerPCLoginStatusNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMServerPCLoginStatusNotify::~IMServerPCLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:IM.Server.IMServerPCLoginStatusNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMServerPCLoginStatusNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMServerPCLoginStatusNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMServerPCLoginStatusNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMServerPCLoginStatusNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.login_status_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.login_status_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMServerPCLoginStatusNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 login_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.login_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMServerPCLoginStatusNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMServerPCLoginStatusNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 login_status = 2;
  if (this->_internal_login_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_login_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMServerPCLoginStatusNotify)
  return target;
}

size_t IMServerPCLoginStatusNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMServerPCLoginStatusNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 login_status = 2;
  if (this->_internal_login_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMServerPCLoginStatusNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMServerPCLoginStatusNotify*>(
      &from));
}

void IMServerPCLoginStatusNotify::MergeFrom(const IMServerPCLoginStatusNotify& from) {
  IMServerPCLoginStatusNotify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMServerPCLoginStatusNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_login_status() != 0) {
    _this->_internal_set_login_status(from._internal_login_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMServerPCLoginStatusNotify::CopyFrom(const IMServerPCLoginStatusNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMServerPCLoginStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMServerPCLoginStatusNotify::IsInitialized() const {
  return true;
}

void IMServerPCLoginStatusNotify::InternalSwap(IMServerPCLoginStatusNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMServerPCLoginStatusNotify, _impl_.login_status_)
      + sizeof(IMServerPCLoginStatusNotify::_impl_.login_status_)
      - PROTOBUF_FIELD_OFFSET(IMServerPCLoginStatusNotify, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMServerPCLoginStatusNotify::GetTypeName() const {
  return "IM.Server.IMServerPCLoginStatusNotify";
}


// ===================================================================

class IMPushToUserReq::_Internal {
 public:
};

void IMPushToUserReq::clear_user_token_list() {
  _impl_.user_token_list_.Clear();
}
IMPushToUserReq::IMPushToUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMPushToUserReq)
}
IMPushToUserReq::IMPushToUserReq(const IMPushToUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMPushToUserReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_token_list_){from._impl_.user_token_list_}
    , decltype(_impl_.flash_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.flash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flash().empty()) {
    _this->_impl_.flash_.Set(from._internal_flash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMPushToUserReq)
}

inline void IMPushToUserReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_token_list_){arena}
    , decltype(_impl_.flash_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.flash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMPushToUserReq::~IMPushToUserReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMPushToUserReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMPushToUserReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_token_list_.~RepeatedPtrField();
  _impl_.flash_.Destroy();
  _impl_.data_.Destroy();
}

void IMPushToUserReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMPushToUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMPushToUserReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_token_list_.Clear();
  _impl_.flash_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* IMPushToUserReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string flash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_token_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMPushToUserReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMPushToUserReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string flash = 1;
  if (!this->_internal_flash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flash().data(), static_cast<int>(this->_internal_flash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMPushToUserReq.flash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flash(), target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMPushToUserReq.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_token_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_token_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMPushToUserReq)
  return target;
}

size_t IMPushToUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMPushToUserReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  total_size += 1UL * this->_internal_user_token_list_size();
  for (const auto& msg : this->_impl_.user_token_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string flash = 1;
  if (!this->_internal_flash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flash());
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMPushToUserReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMPushToUserReq*>(
      &from));
}

void IMPushToUserReq::MergeFrom(const IMPushToUserReq& from) {
  IMPushToUserReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMPushToUserReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_token_list_.MergeFrom(from._impl_.user_token_list_);
  if (!from._internal_flash().empty()) {
    _this->_internal_set_flash(from._internal_flash());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMPushToUserReq::CopyFrom(const IMPushToUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMPushToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushToUserReq::IsInitialized() const {
  return true;
}

void IMPushToUserReq::InternalSwap(IMPushToUserReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_token_list_.InternalSwap(&other->_impl_.user_token_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flash_, lhs_arena,
      &other->_impl_.flash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

std::string IMPushToUserReq::GetTypeName() const {
  return "IM.Server.IMPushToUserReq";
}


// ===================================================================

class IMPushToUserRsp::_Internal {
 public:
};

void IMPushToUserRsp::clear_push_result_list() {
  _impl_.push_result_list_.Clear();
}
IMPushToUserRsp::IMPushToUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMPushToUserRsp)
}
IMPushToUserRsp::IMPushToUserRsp(const IMPushToUserRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMPushToUserRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.push_result_list_){from._impl_.push_result_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMPushToUserRsp)
}

inline void IMPushToUserRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.push_result_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMPushToUserRsp::~IMPushToUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMPushToUserRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMPushToUserRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.push_result_list_.~RepeatedPtrField();
}

void IMPushToUserRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMPushToUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMPushToUserRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.push_result_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMPushToUserRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.PushResult push_result_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_push_result_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMPushToUserRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMPushToUserRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_push_result_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_push_result_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMPushToUserRsp)
  return target;
}

size_t IMPushToUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMPushToUserRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  total_size += 1UL * this->_internal_push_result_list_size();
  for (const auto& msg : this->_impl_.push_result_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMPushToUserRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMPushToUserRsp*>(
      &from));
}

void IMPushToUserRsp::MergeFrom(const IMPushToUserRsp& from) {
  IMPushToUserRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMPushToUserRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.push_result_list_.MergeFrom(from._impl_.push_result_list_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMPushToUserRsp::CopyFrom(const IMPushToUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMPushToUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushToUserRsp::IsInitialized() const {
  return true;
}

void IMPushToUserRsp::InternalSwap(IMPushToUserRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.push_result_list_.InternalSwap(&other->_impl_.push_result_list_);
}

std::string IMPushToUserRsp::GetTypeName() const {
  return "IM.Server.IMPushToUserRsp";
}


// ===================================================================

class IMGroupGetShieldReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupGetShieldReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGroupGetShieldReq::IMGroupGetShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGroupGetShieldReq)
}
IMGroupGetShieldReq::IMGroupGetShieldReq(const IMGroupGetShieldReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupGetShieldReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){from._impl_.user_id_}
    , /*decltype(_impl_._user_id_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGroupGetShieldReq)
}

inline void IMGroupGetShieldReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){arena}
    , /*decltype(_impl_._user_id_cached_byte_size_)*/{0}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupGetShieldReq::~IMGroupGetShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGroupGetShieldReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupGetShieldReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.~RepeatedField();
  _impl_.attach_data_.Destroy();
}

void IMGroupGetShieldReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupGetShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGroupGetShieldReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.group_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupGetShieldReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupGetShieldReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGroupGetShieldReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  // repeated uint32 user_id = 2;
  {
    int byte_size = _impl_._user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_user_id(), byte_size, target);
    }
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGroupGetShieldReq)
  return target;
}

size_t IMGroupGetShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGroupGetShieldReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 user_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupGetShieldReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupGetShieldReq*>(
      &from));
}

void IMGroupGetShieldReq::MergeFrom(const IMGroupGetShieldReq& from) {
  IMGroupGetShieldReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGroupGetShieldReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_id_.MergeFrom(from._impl_.user_id_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupGetShieldReq::CopyFrom(const IMGroupGetShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGroupGetShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetShieldReq::IsInitialized() const {
  return true;
}

void IMGroupGetShieldReq::InternalSwap(IMGroupGetShieldReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_id_.InternalSwap(&other->_impl_.user_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.group_id_, other->_impl_.group_id_);
}

std::string IMGroupGetShieldReq::GetTypeName() const {
  return "IM.Server.IMGroupGetShieldReq";
}


// ===================================================================

class IMGroupGetShieldRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGroupGetShieldRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void IMGroupGetShieldRsp::clear_shield_status_list() {
  _impl_.shield_status_list_.Clear();
}
IMGroupGetShieldRsp::IMGroupGetShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMGroupGetShieldRsp)
}
IMGroupGetShieldRsp::IMGroupGetShieldRsp(const IMGroupGetShieldRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGroupGetShieldRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shield_status_list_){from._impl_.shield_status_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGroupGetShieldRsp)
}

inline void IMGroupGetShieldRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shield_status_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGroupGetShieldRsp::~IMGroupGetShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGroupGetShieldRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGroupGetShieldRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shield_status_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void IMGroupGetShieldRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGroupGetShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGroupGetShieldRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shield_status_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.group_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGroupGetShieldRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shield_status_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGroupGetShieldRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGroupGetShieldRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shield_status_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_shield_status_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGroupGetShieldRsp)
  return target;
}

size_t IMGroupGetShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGroupGetShieldRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  total_size += 1UL * this->_internal_shield_status_list_size();
  for (const auto& msg : this->_impl_.shield_status_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGroupGetShieldRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGroupGetShieldRsp*>(
      &from));
}

void IMGroupGetShieldRsp::MergeFrom(const IMGroupGetShieldRsp& from) {
  IMGroupGetShieldRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGroupGetShieldRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shield_status_list_.MergeFrom(from._impl_.shield_status_list_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGroupGetShieldRsp::CopyFrom(const IMGroupGetShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGroupGetShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetShieldRsp::IsInitialized() const {
  return true;
}

void IMGroupGetShieldRsp::InternalSwap(IMGroupGetShieldRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.shield_status_list_.InternalSwap(&other->_impl_.shield_status_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.group_id_, other->_impl_.group_id_);
}

std::string IMGroupGetShieldRsp::GetTypeName() const {
  return "IM.Server.IMGroupGetShieldRsp";
}


// ===================================================================

class IMFileTransferReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMFileTransferReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMFileTransferReq::IMFileTransferReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileTransferReq)
}
IMFileTransferReq::IMFileTransferReq(const IMFileTransferReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileTransferReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.from_user_id_){}
    , decltype(_impl_.to_user_id_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.trans_mode_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_user_id_, &from._impl_.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trans_mode_) -
    reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileTransferReq)
}

inline void IMFileTransferReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.from_user_id_){0u}
    , decltype(_impl_.to_user_id_){0u}
    , decltype(_impl_.file_size_){0u}
    , decltype(_impl_.trans_mode_){0}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileTransferReq::~IMFileTransferReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileTransferReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileTransferReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.attach_data_.Destroy();
}

void IMFileTransferReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileTransferReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileTransferReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.trans_mode_) -
      reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.trans_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileTransferReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.FileType trans_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_mode(static_cast<::IM::BaseDefine::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileTransferReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileTransferReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferReq.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  // .IM.BaseDefine.FileType trans_mode = 5;
  if (this->_internal_trans_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_trans_mode(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileTransferReq)
  return target;
}

size_t IMFileTransferReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileTransferReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
  }

  // .IM.BaseDefine.FileType trans_mode = 5;
  if (this->_internal_trans_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trans_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileTransferReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileTransferReq*>(
      &from));
}

void IMFileTransferReq::MergeFrom(const IMFileTransferReq& from) {
  IMFileTransferReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileTransferReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_from_user_id() != 0) {
    _this->_internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _this->_internal_set_to_user_id(from._internal_to_user_id());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_trans_mode() != 0) {
    _this->_internal_set_trans_mode(from._internal_trans_mode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileTransferReq::CopyFrom(const IMFileTransferReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileTransferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileTransferReq::IsInitialized() const {
  return true;
}

void IMFileTransferReq::InternalSwap(IMFileTransferReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileTransferReq, _impl_.trans_mode_)
      + sizeof(IMFileTransferReq::_impl_.trans_mode_)
      - PROTOBUF_FIELD_OFFSET(IMFileTransferReq, _impl_.from_user_id_)>(
          reinterpret_cast<char*>(&_impl_.from_user_id_),
          reinterpret_cast<char*>(&other->_impl_.from_user_id_));
}

std::string IMFileTransferReq::GetTypeName() const {
  return "IM.Server.IMFileTransferReq";
}


// ===================================================================

class IMFileTransferRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMFileTransferRsp>()._impl_._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trans_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IMFileTransferRsp::IMFileTransferRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileTransferRsp)
}
IMFileTransferRsp::IMFileTransferRsp(const IMFileTransferRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileTransferRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.from_user_id_){}
    , decltype(_impl_.to_user_id_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.trans_mode_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_task_id()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_code_, &from._impl_.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trans_mode_) -
    reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileTransferRsp)
}

inline void IMFileTransferRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.result_code_){0u}
    , decltype(_impl_.from_user_id_){0u}
    , decltype(_impl_.to_user_id_){0u}
    , decltype(_impl_.file_size_){0u}
    , decltype(_impl_.trans_mode_){0}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileTransferRsp::~IMFileTransferRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileTransferRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileTransferRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.task_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void IMFileTransferRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileTransferRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileTransferRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.task_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_user_id_) -
      reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.to_user_id_));
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.file_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.trans_mode_) -
        reinterpret_cast<char*>(&_impl_.file_size_)) + sizeof(_impl_.trans_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileTransferRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 from_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_file_size(&has_bits);
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string task_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional .IM.BaseDefine.FileType trans_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_mode(static_cast<::IM::BaseDefine::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileTransferRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileTransferRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  // uint32 from_user_id = 2;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 3;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_to_user_id(), target);
  }

  // optional string file_name = 4;
  if (_internal_has_file_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferRsp.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // optional uint32 file_size = 5;
  if (_internal_has_file_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_file_size(), target);
  }

  // optional string task_id = 6;
  if (_internal_has_task_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferRsp.task_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_task_id(), target);
  }

  // optional .IM.BaseDefine.FileType trans_mode = 7;
  if (_internal_has_trans_mode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_trans_mode(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileTransferRsp)
  return target;
}

size_t IMFileTransferRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileTransferRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional string task_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_task_id());
    }

    // optional bytes attach_data = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_attach_data());
    }

  }
  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  // uint32 from_user_id = 2;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 3;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional uint32 file_size = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional .IM.BaseDefine.FileType trans_mode = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trans_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileTransferRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileTransferRsp*>(
      &from));
}

void IMFileTransferRsp::MergeFrom(const IMFileTransferRsp& from) {
  IMFileTransferRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileTransferRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_task_id(from._internal_task_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (from._internal_from_user_id() != 0) {
    _this->_internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _this->_internal_set_to_user_id(from._internal_to_user_id());
  }
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.file_size_ = from._impl_.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.trans_mode_ = from._impl_.trans_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileTransferRsp::CopyFrom(const IMFileTransferRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileTransferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileTransferRsp::IsInitialized() const {
  return true;
}

void IMFileTransferRsp::InternalSwap(IMFileTransferRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileTransferRsp, _impl_.trans_mode_)
      + sizeof(IMFileTransferRsp::_impl_.trans_mode_)
      - PROTOBUF_FIELD_OFFSET(IMFileTransferRsp, _impl_.result_code_)>(
          reinterpret_cast<char*>(&_impl_.result_code_),
          reinterpret_cast<char*>(&other->_impl_.result_code_));
}

std::string IMFileTransferRsp::GetTypeName() const {
  return "IM.Server.IMFileTransferRsp";
}


// ===================================================================

class IMFileServerIPReq::_Internal {
 public:
};

IMFileServerIPReq::IMFileServerIPReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileServerIPReq)
}
IMFileServerIPReq::IMFileServerIPReq(const IMFileServerIPReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileServerIPReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileServerIPReq)
}

inline void IMFileServerIPReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

IMFileServerIPReq::~IMFileServerIPReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileServerIPReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileServerIPReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMFileServerIPReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileServerIPReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileServerIPReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IMFileServerIPReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileServerIPReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileServerIPReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileServerIPReq)
  return target;
}

size_t IMFileServerIPReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileServerIPReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileServerIPReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileServerIPReq*>(
      &from));
}

void IMFileServerIPReq::MergeFrom(const IMFileServerIPReq& from) {
  IMFileServerIPReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileServerIPReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileServerIPReq::CopyFrom(const IMFileServerIPReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileServerIPReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileServerIPReq::IsInitialized() const {
  return true;
}

void IMFileServerIPReq::InternalSwap(IMFileServerIPReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string IMFileServerIPReq::GetTypeName() const {
  return "IM.Server.IMFileServerIPReq";
}


// ===================================================================

class IMFileServerIPRsp::_Internal {
 public:
};

void IMFileServerIPRsp::clear_ip_addr_list() {
  _impl_.ip_addr_list_.Clear();
}
IMFileServerIPRsp::IMFileServerIPRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Server.IMFileServerIPRsp)
}
IMFileServerIPRsp::IMFileServerIPRsp(const IMFileServerIPRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileServerIPRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addr_list_){from._impl_.ip_addr_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileServerIPRsp)
}

inline void IMFileServerIPRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addr_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMFileServerIPRsp::~IMFileServerIPRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileServerIPRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileServerIPRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_addr_list_.~RepeatedPtrField();
}

void IMFileServerIPRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileServerIPRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileServerIPRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_addr_list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileServerIPRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_addr_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileServerIPRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileServerIPRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ip_addr_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_ip_addr_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileServerIPRsp)
  return target;
}

size_t IMFileServerIPRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileServerIPRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  total_size += 1UL * this->_internal_ip_addr_list_size();
  for (const auto& msg : this->_impl_.ip_addr_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileServerIPRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileServerIPRsp*>(
      &from));
}

void IMFileServerIPRsp::MergeFrom(const IMFileServerIPRsp& from) {
  IMFileServerIPRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileServerIPRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ip_addr_list_.MergeFrom(from._impl_.ip_addr_list_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileServerIPRsp::CopyFrom(const IMFileServerIPRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileServerIPRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileServerIPRsp::IsInitialized() const {
  return true;
}

void IMFileServerIPRsp::InternalSwap(IMFileServerIPRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_addr_list_.InternalSwap(&other->_impl_.ip_addr_list_);
}

std::string IMFileServerIPRsp::GetTypeName() const {
  return "IM.Server.IMFileServerIPRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Server
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Server::IMStopReceivePacket*
Arena::CreateMaybeMessage< ::IM::Server::IMStopReceivePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMStopReceivePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMValidateReq*
Arena::CreateMaybeMessage< ::IM::Server::IMValidateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMValidateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMValidateRsp*
Arena::CreateMaybeMessage< ::IM::Server::IMValidateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMValidateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGetDeviceTokenReq*
Arena::CreateMaybeMessage< ::IM::Server::IMGetDeviceTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGetDeviceTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGetDeviceTokenRsp*
Arena::CreateMaybeMessage< ::IM::Server::IMGetDeviceTokenRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGetDeviceTokenRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMRoleSet*
Arena::CreateMaybeMessage< ::IM::Server::IMRoleSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMRoleSet >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMOnlineUserInfo*
Arena::CreateMaybeMessage< ::IM::Server::IMOnlineUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMOnlineUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMMsgServInfo*
Arena::CreateMaybeMessage< ::IM::Server::IMMsgServInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMMsgServInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMUserStatusUpdate*
Arena::CreateMaybeMessage< ::IM::Server::IMUserStatusUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMUserStatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMUserCntUpdate*
Arena::CreateMaybeMessage< ::IM::Server::IMUserCntUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMUserCntUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMServerKickUser*
Arena::CreateMaybeMessage< ::IM::Server::IMServerKickUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMServerKickUser >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMServerPCLoginStatusNotify*
Arena::CreateMaybeMessage< ::IM::Server::IMServerPCLoginStatusNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMServerPCLoginStatusNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMPushToUserReq*
Arena::CreateMaybeMessage< ::IM::Server::IMPushToUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMPushToUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMPushToUserRsp*
Arena::CreateMaybeMessage< ::IM::Server::IMPushToUserRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMPushToUserRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGroupGetShieldReq*
Arena::CreateMaybeMessage< ::IM::Server::IMGroupGetShieldReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGroupGetShieldReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMGroupGetShieldRsp*
Arena::CreateMaybeMessage< ::IM::Server::IMGroupGetShieldRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMGroupGetShieldRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileTransferReq*
Arena::CreateMaybeMessage< ::IM::Server::IMFileTransferReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileTransferReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileTransferRsp*
Arena::CreateMaybeMessage< ::IM::Server::IMFileTransferRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileTransferRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileServerIPReq*
Arena::CreateMaybeMessage< ::IM::Server::IMFileServerIPReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileServerIPReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Server::IMFileServerIPRsp*
Arena::CreateMaybeMessage< ::IM::Server::IMFileServerIPRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Server::IMFileServerIPRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
