// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Internal.proto

#include "IM.Internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace IM {
namespace Internal {
PROTOBUF_CONSTEXPR IMSyncAuthInfoReq::IMSyncAuthInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latest_time_)*/0u} {}
struct IMSyncAuthInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMSyncAuthInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMSyncAuthInfoReqDefaultTypeInternal() {}
  union {
    IMSyncAuthInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMSyncAuthInfoReqDefaultTypeInternal _IMSyncAuthInfoReq_default_instance_;
PROTOBUF_CONSTEXPR IMSyncAuthInfoRsp::IMSyncAuthInfoRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_list_)*/nullptr
  , /*decltype(_impl_.latest_time_)*/0u} {}
struct IMSyncAuthInfoRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMSyncAuthInfoRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMSyncAuthInfoRspDefaultTypeInternal() {}
  union {
    IMSyncAuthInfoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMSyncAuthInfoRspDefaultTypeInternal _IMSyncAuthInfoRsp_default_instance_;
PROTOBUF_CONSTEXPR IMGetUserIdListByNickNameReq::IMGetUserIdListByNickNameReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nick_name_list_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct IMGetUserIdListByNickNameReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGetUserIdListByNickNameReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGetUserIdListByNickNameReqDefaultTypeInternal() {}
  union {
    IMGetUserIdListByNickNameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGetUserIdListByNickNameReqDefaultTypeInternal _IMGetUserIdListByNickNameReq_default_instance_;
PROTOBUF_CONSTEXPR IMGetUserIdListByNickNameRsp::IMGetUserIdListByNickNameRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_info_list_)*/nullptr} {}
struct IMGetUserIdListByNickNameRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMGetUserIdListByNickNameRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMGetUserIdListByNickNameRspDefaultTypeInternal() {}
  union {
    IMGetUserIdListByNickNameRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMGetUserIdListByNickNameRspDefaultTypeInternal _IMGetUserIdListByNickNameRsp_default_instance_;
}  // namespace Internal
}  // namespace IM
namespace IM {
namespace Internal {

// ===================================================================

class IMSyncAuthInfoReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMSyncAuthInfoReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMSyncAuthInfoReq::IMSyncAuthInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Internal.IMSyncAuthInfoReq)
}
IMSyncAuthInfoReq::IMSyncAuthInfoReq(const IMSyncAuthInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMSyncAuthInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.latest_time_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.latest_time_ = from._impl_.latest_time_;
  // @@protoc_insertion_point(copy_constructor:IM.Internal.IMSyncAuthInfoReq)
}

inline void IMSyncAuthInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.latest_time_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMSyncAuthInfoReq::~IMSyncAuthInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Internal.IMSyncAuthInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMSyncAuthInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void IMSyncAuthInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMSyncAuthInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Internal.IMSyncAuthInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.latest_time_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMSyncAuthInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 latest_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.latest_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMSyncAuthInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Internal.IMSyncAuthInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 latest_time = 1;
  if (this->_internal_latest_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_latest_time(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Internal.IMSyncAuthInfoReq)
  return target;
}

size_t IMSyncAuthInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Internal.IMSyncAuthInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 latest_time = 1;
  if (this->_internal_latest_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_latest_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSyncAuthInfoReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMSyncAuthInfoReq*>(
      &from));
}

void IMSyncAuthInfoReq::MergeFrom(const IMSyncAuthInfoReq& from) {
  IMSyncAuthInfoReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Internal.IMSyncAuthInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_latest_time() != 0) {
    _this->_internal_set_latest_time(from._internal_latest_time());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMSyncAuthInfoReq::CopyFrom(const IMSyncAuthInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Internal.IMSyncAuthInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSyncAuthInfoReq::IsInitialized() const {
  return true;
}

void IMSyncAuthInfoReq::InternalSwap(IMSyncAuthInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.latest_time_, other->_impl_.latest_time_);
}

std::string IMSyncAuthInfoReq::GetTypeName() const {
  return "IM.Internal.IMSyncAuthInfoReq";
}


// ===================================================================

class IMSyncAuthInfoRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMSyncAuthInfoRsp>()._impl_._has_bits_);
  static const ::IM::BaseDefine::AuthInfo& auth_list(const IMSyncAuthInfoRsp* msg);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::IM::BaseDefine::AuthInfo&
IMSyncAuthInfoRsp::_Internal::auth_list(const IMSyncAuthInfoRsp* msg) {
  return *msg->_impl_.auth_list_;
}
void IMSyncAuthInfoRsp::clear_auth_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.auth_list_ != nullptr) {
    delete _impl_.auth_list_;
  }
  _impl_.auth_list_ = nullptr;
}
IMSyncAuthInfoRsp::IMSyncAuthInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Internal.IMSyncAuthInfoRsp)
}
IMSyncAuthInfoRsp::IMSyncAuthInfoRsp(const IMSyncAuthInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMSyncAuthInfoRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_list_){nullptr}
    , decltype(_impl_.latest_time_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_auth_list()) {
    _this->_impl_.auth_list_ = new ::IM::BaseDefine::AuthInfo(*from._impl_.auth_list_);
  }
  _this->_impl_.latest_time_ = from._impl_.latest_time_;
  // @@protoc_insertion_point(copy_constructor:IM.Internal.IMSyncAuthInfoRsp)
}

inline void IMSyncAuthInfoRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.auth_list_){nullptr}
    , decltype(_impl_.latest_time_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMSyncAuthInfoRsp::~IMSyncAuthInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Internal.IMSyncAuthInfoRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMSyncAuthInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.auth_list_;
}

void IMSyncAuthInfoRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMSyncAuthInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Internal.IMSyncAuthInfoRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.auth_list_ != nullptr) {
    delete _impl_.auth_list_;
  }
  _impl_.auth_list_ = nullptr;
  _impl_.latest_time_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMSyncAuthInfoRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 latest_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.latest_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.AuthInfo auth_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMSyncAuthInfoRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Internal.IMSyncAuthInfoRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 latest_time = 1;
  if (this->_internal_latest_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_latest_time(), target);
  }

  // .IM.BaseDefine.AuthInfo auth_list = 2;
  if (this->_internal_has_auth_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::auth_list(this),
        _Internal::auth_list(this).GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Internal.IMSyncAuthInfoRsp)
  return target;
}

size_t IMSyncAuthInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Internal.IMSyncAuthInfoRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.BaseDefine.AuthInfo auth_list = 2;
  if (this->_internal_has_auth_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auth_list_);
  }

  // uint32 latest_time = 1;
  if (this->_internal_latest_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_latest_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSyncAuthInfoRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMSyncAuthInfoRsp*>(
      &from));
}

void IMSyncAuthInfoRsp::MergeFrom(const IMSyncAuthInfoRsp& from) {
  IMSyncAuthInfoRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Internal.IMSyncAuthInfoRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_has_auth_list()) {
    _this->_internal_mutable_auth_list()->::IM::BaseDefine::AuthInfo::MergeFrom(
        from._internal_auth_list());
  }
  if (from._internal_latest_time() != 0) {
    _this->_internal_set_latest_time(from._internal_latest_time());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMSyncAuthInfoRsp::CopyFrom(const IMSyncAuthInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Internal.IMSyncAuthInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSyncAuthInfoRsp::IsInitialized() const {
  return true;
}

void IMSyncAuthInfoRsp::InternalSwap(IMSyncAuthInfoRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMSyncAuthInfoRsp, _impl_.latest_time_)
      + sizeof(IMSyncAuthInfoRsp::_impl_.latest_time_)
      - PROTOBUF_FIELD_OFFSET(IMSyncAuthInfoRsp, _impl_.auth_list_)>(
          reinterpret_cast<char*>(&_impl_.auth_list_),
          reinterpret_cast<char*>(&other->_impl_.auth_list_));
}

std::string IMSyncAuthInfoRsp::GetTypeName() const {
  return "IM.Internal.IMSyncAuthInfoRsp";
}


// ===================================================================

class IMGetUserIdListByNickNameReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGetUserIdListByNickNameReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMGetUserIdListByNickNameReq::IMGetUserIdListByNickNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Internal.IMGetUserIdListByNickNameReq)
}
IMGetUserIdListByNickNameReq::IMGetUserIdListByNickNameReq(const IMGetUserIdListByNickNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGetUserIdListByNickNameReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nick_name_list_){}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.nick_name_list_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_list_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name_list().empty()) {
    _this->_impl_.nick_name_list_.Set(from._internal_nick_name_list(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Internal.IMGetUserIdListByNickNameReq)
}

inline void IMGetUserIdListByNickNameReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nick_name_list_){}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.nick_name_list_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_list_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGetUserIdListByNickNameReq::~IMGetUserIdListByNickNameReq() {
  // @@protoc_insertion_point(destructor:IM.Internal.IMGetUserIdListByNickNameReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGetUserIdListByNickNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_name_list_.Destroy();
  _impl_.attach_data_.Destroy();
}

void IMGetUserIdListByNickNameReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGetUserIdListByNickNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Internal.IMGetUserIdListByNickNameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_name_list_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetUserIdListByNickNameReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nick_name_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nick_name_list();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetUserIdListByNickNameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Internal.IMGetUserIdListByNickNameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nick_name_list = 1;
  if (!this->_internal_nick_name_list().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name_list().data(), static_cast<int>(this->_internal_nick_name_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Internal.IMGetUserIdListByNickNameReq.nick_name_list");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nick_name_list(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Internal.IMGetUserIdListByNickNameReq)
  return target;
}

size_t IMGetUserIdListByNickNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Internal.IMGetUserIdListByNickNameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name_list = 1;
  if (!this->_internal_nick_name_list().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name_list());
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetUserIdListByNickNameReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGetUserIdListByNickNameReq*>(
      &from));
}

void IMGetUserIdListByNickNameReq::MergeFrom(const IMGetUserIdListByNickNameReq& from) {
  IMGetUserIdListByNickNameReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Internal.IMGetUserIdListByNickNameReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name_list().empty()) {
    _this->_internal_set_nick_name_list(from._internal_nick_name_list());
  }
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetUserIdListByNickNameReq::CopyFrom(const IMGetUserIdListByNickNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Internal.IMGetUserIdListByNickNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetUserIdListByNickNameReq::IsInitialized() const {
  return true;
}

void IMGetUserIdListByNickNameReq::InternalSwap(IMGetUserIdListByNickNameReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_list_, lhs_arena,
      &other->_impl_.nick_name_list_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string IMGetUserIdListByNickNameReq::GetTypeName() const {
  return "IM.Internal.IMGetUserIdListByNickNameReq";
}


// ===================================================================

class IMGetUserIdListByNickNameRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMGetUserIdListByNickNameRsp>()._impl_._has_bits_);
  static const ::IM::BaseDefine::UserInfo& user_info_list(const IMGetUserIdListByNickNameRsp* msg);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::IM::BaseDefine::UserInfo&
IMGetUserIdListByNickNameRsp::_Internal::user_info_list(const IMGetUserIdListByNickNameRsp* msg) {
  return *msg->_impl_.user_info_list_;
}
void IMGetUserIdListByNickNameRsp::clear_user_info_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_list_ != nullptr) {
    delete _impl_.user_info_list_;
  }
  _impl_.user_info_list_ = nullptr;
}
IMGetUserIdListByNickNameRsp::IMGetUserIdListByNickNameRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.Internal.IMGetUserIdListByNickNameRsp)
}
IMGetUserIdListByNickNameRsp::IMGetUserIdListByNickNameRsp(const IMGetUserIdListByNickNameRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMGetUserIdListByNickNameRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_info_list_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_info_list()) {
    _this->_impl_.user_info_list_ = new ::IM::BaseDefine::UserInfo(*from._impl_.user_info_list_);
  }
  // @@protoc_insertion_point(copy_constructor:IM.Internal.IMGetUserIdListByNickNameRsp)
}

inline void IMGetUserIdListByNickNameRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_info_list_){nullptr}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMGetUserIdListByNickNameRsp::~IMGetUserIdListByNickNameRsp() {
  // @@protoc_insertion_point(destructor:IM.Internal.IMGetUserIdListByNickNameRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMGetUserIdListByNickNameRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_info_list_;
}

void IMGetUserIdListByNickNameRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMGetUserIdListByNickNameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Internal.IMGetUserIdListByNickNameRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.user_info_list_ != nullptr) {
    delete _impl_.user_info_list_;
  }
  _impl_.user_info_list_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetUserIdListByNickNameRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IM.BaseDefine.UserInfo user_info_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetUserIdListByNickNameRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Internal.IMGetUserIdListByNickNameRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.BaseDefine.UserInfo user_info_list = 1;
  if (this->_internal_has_user_info_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_info_list(this),
        _Internal::user_info_list(this).GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Internal.IMGetUserIdListByNickNameRsp)
  return target;
}

size_t IMGetUserIdListByNickNameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Internal.IMGetUserIdListByNickNameRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.BaseDefine.UserInfo user_info_list = 1;
  if (this->_internal_has_user_info_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_info_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetUserIdListByNickNameRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMGetUserIdListByNickNameRsp*>(
      &from));
}

void IMGetUserIdListByNickNameRsp::MergeFrom(const IMGetUserIdListByNickNameRsp& from) {
  IMGetUserIdListByNickNameRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.Internal.IMGetUserIdListByNickNameRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_has_user_info_list()) {
    _this->_internal_mutable_user_info_list()->::IM::BaseDefine::UserInfo::MergeFrom(
        from._internal_user_info_list());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetUserIdListByNickNameRsp::CopyFrom(const IMGetUserIdListByNickNameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Internal.IMGetUserIdListByNickNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetUserIdListByNickNameRsp::IsInitialized() const {
  return true;
}

void IMGetUserIdListByNickNameRsp::InternalSwap(IMGetUserIdListByNickNameRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_info_list_, other->_impl_.user_info_list_);
}

std::string IMGetUserIdListByNickNameRsp::GetTypeName() const {
  return "IM.Internal.IMGetUserIdListByNickNameRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Internal
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Internal::IMSyncAuthInfoReq*
Arena::CreateMaybeMessage< ::IM::Internal::IMSyncAuthInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Internal::IMSyncAuthInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Internal::IMSyncAuthInfoRsp*
Arena::CreateMaybeMessage< ::IM::Internal::IMSyncAuthInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Internal::IMSyncAuthInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Internal::IMGetUserIdListByNickNameReq*
Arena::CreateMaybeMessage< ::IM::Internal::IMGetUserIdListByNickNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Internal::IMGetUserIdListByNickNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Internal::IMGetUserIdListByNickNameRsp*
Arena::CreateMaybeMessage< ::IM::Internal::IMGetUserIdListByNickNameRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Internal::IMGetUserIdListByNickNameRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
