// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.File.proto

#include "IM.File.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace IM {
namespace File {
PROTOBUF_CONSTEXPR IMFileLoginReq::IMFileLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.file_role_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileLoginReqDefaultTypeInternal() {}
  union {
    IMFileLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileLoginReqDefaultTypeInternal _IMFileLoginReq_default_instance_;
PROTOBUF_CONSTEXPR IMFileLoginRsp::IMFileLoginRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileLoginRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileLoginRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileLoginRspDefaultTypeInternal() {}
  union {
    IMFileLoginRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileLoginRspDefaultTypeInternal _IMFileLoginRsp_default_instance_;
PROTOBUF_CONSTEXPR IMFileState::IMFileState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileStateDefaultTypeInternal() {}
  union {
    IMFileState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileStateDefaultTypeInternal _IMFileState_default_instance_;
PROTOBUF_CONSTEXPR IMFilePullDataReq::IMFilePullDataReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.trans_mode_)*/0
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_.data_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFilePullDataReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFilePullDataReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFilePullDataReqDefaultTypeInternal() {}
  union {
    IMFilePullDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFilePullDataReqDefaultTypeInternal _IMFilePullDataReq_default_instance_;
PROTOBUF_CONSTEXPR IMFilePullDataRsp::IMFilePullDataRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFilePullDataRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFilePullDataRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFilePullDataRspDefaultTypeInternal() {}
  union {
    IMFilePullDataRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFilePullDataRspDefaultTypeInternal _IMFilePullDataRsp_default_instance_;
PROTOBUF_CONSTEXPR IMFileReq::IMFileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_user_id_)*/0u
  , /*decltype(_impl_.to_user_id_)*/0u
  , /*decltype(_impl_.file_size_)*/0u
  , /*decltype(_impl_.trans_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileReqDefaultTypeInternal() {}
  union {
    IMFileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileReqDefaultTypeInternal _IMFileReq_default_instance_;
PROTOBUF_CONSTEXPR IMFileRsp::IMFileRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_addr_list_)*/{}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_.from_user_id_)*/0u
  , /*decltype(_impl_.to_user_id_)*/0u
  , /*decltype(_impl_.trans_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileRspDefaultTypeInternal() {}
  union {
    IMFileRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileRspDefaultTypeInternal _IMFileRsp_default_instance_;
PROTOBUF_CONSTEXPR IMFileNotify::IMFileNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_addr_list_)*/{}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_user_id_)*/0u
  , /*decltype(_impl_.to_user_id_)*/0u
  , /*decltype(_impl_.file_size_)*/0u
  , /*decltype(_impl_.trans_mode_)*/0
  , /*decltype(_impl_.offline_ready_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileNotifyDefaultTypeInternal() {}
  union {
    IMFileNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileNotifyDefaultTypeInternal _IMFileNotify_default_instance_;
PROTOBUF_CONSTEXPR IMFileHasOfflineReq::IMFileHasOfflineReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u} {}
struct IMFileHasOfflineReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileHasOfflineReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileHasOfflineReqDefaultTypeInternal() {}
  union {
    IMFileHasOfflineReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileHasOfflineReqDefaultTypeInternal _IMFileHasOfflineReq_default_instance_;
PROTOBUF_CONSTEXPR IMFileHasOfflineRsp::IMFileHasOfflineRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.offline_file_list_)*/{}
  , /*decltype(_impl_.ip_addr_list_)*/{}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/0u} {}
struct IMFileHasOfflineRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileHasOfflineRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileHasOfflineRspDefaultTypeInternal() {}
  union {
    IMFileHasOfflineRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileHasOfflineRspDefaultTypeInternal _IMFileHasOfflineRsp_default_instance_;
PROTOBUF_CONSTEXPR IMFileAddOfflineReq::IMFileAddOfflineReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_user_id_)*/0u
  , /*decltype(_impl_.to_user_id_)*/0u
  , /*decltype(_impl_.file_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileAddOfflineReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileAddOfflineReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileAddOfflineReqDefaultTypeInternal() {}
  union {
    IMFileAddOfflineReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileAddOfflineReqDefaultTypeInternal _IMFileAddOfflineReq_default_instance_;
PROTOBUF_CONSTEXPR IMFileDelOfflineReq::IMFileDelOfflineReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_user_id_)*/0u
  , /*decltype(_impl_.to_user_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMFileDelOfflineReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMFileDelOfflineReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMFileDelOfflineReqDefaultTypeInternal() {}
  union {
    IMFileDelOfflineReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMFileDelOfflineReqDefaultTypeInternal _IMFileDelOfflineReq_default_instance_;
}  // namespace File
}  // namespace IM
namespace IM {
namespace File {

// ===================================================================

class IMFileLoginReq::_Internal {
 public:
};

IMFileLoginReq::IMFileLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileLoginReq)
}
IMFileLoginReq::IMFileLoginReq(const IMFileLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.file_role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.file_role_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.file_role_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileLoginReq)
}

inline void IMFileLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.file_role_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileLoginReq::~IMFileLoginReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void IMFileLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.file_role_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.file_role_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.ClientFileRole file_role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_role(static_cast<::IM::BaseDefine::ClientFileRole>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileLoginReq.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // .IM.BaseDefine.ClientFileRole file_role = 3;
  if (this->_internal_file_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_file_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileLoginReq)
  return target;
}

size_t IMFileLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.ClientFileRole file_role = 3;
  if (this->_internal_file_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_file_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileLoginReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileLoginReq*>(
      &from));
}

void IMFileLoginReq::MergeFrom(const IMFileLoginReq& from) {
  IMFileLoginReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_file_role() != 0) {
    _this->_internal_set_file_role(from._internal_file_role());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileLoginReq::CopyFrom(const IMFileLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileLoginReq::IsInitialized() const {
  return true;
}

void IMFileLoginReq::InternalSwap(IMFileLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileLoginReq, _impl_.file_role_)
      + sizeof(IMFileLoginReq::_impl_.file_role_)
      - PROTOBUF_FIELD_OFFSET(IMFileLoginReq, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMFileLoginReq::GetTypeName() const {
  return "IM.File.IMFileLoginReq";
}


// ===================================================================

class IMFileLoginRsp::_Internal {
 public:
};

IMFileLoginRsp::IMFileLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileLoginRsp)
}
IMFileLoginRsp::IMFileLoginRsp(const IMFileLoginRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileLoginRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.result_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_code_ = from._impl_.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileLoginRsp)
}

inline void IMFileLoginRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.result_code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileLoginRsp::~IMFileLoginRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileLoginRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileLoginRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void IMFileLoginRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileLoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileLoginRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.result_code_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileLoginRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileLoginRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileLoginRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileLoginRsp.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileLoginRsp)
  return target;
}

size_t IMFileLoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileLoginRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileLoginRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileLoginRsp*>(
      &from));
}

void IMFileLoginRsp::MergeFrom(const IMFileLoginRsp& from) {
  IMFileLoginRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileLoginRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileLoginRsp::CopyFrom(const IMFileLoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileLoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileLoginRsp::IsInitialized() const {
  return true;
}

void IMFileLoginRsp::InternalSwap(IMFileLoginRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  swap(_impl_.result_code_, other->_impl_.result_code_);
}

std::string IMFileLoginRsp::GetTypeName() const {
  return "IM.File.IMFileLoginRsp";
}


// ===================================================================

class IMFileState::_Internal {
 public:
};

IMFileState::IMFileState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileState)
}
IMFileState::IMFileState(const IMFileState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileState)
}

inline void IMFileState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.user_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileState::~IMFileState() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void IMFileState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileState::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.user_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IM.BaseDefine.ClientFileState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::IM::BaseDefine::ClientFileState>(val));
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.BaseDefine.ClientFileState state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileState.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // uint32 user_id = 3;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileState)
  return target;
}

size_t IMFileState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .IM.BaseDefine.ClientFileState state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 user_id = 3;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileState*>(
      &from));
}

void IMFileState::MergeFrom(const IMFileState& from) {
  IMFileState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileState::CopyFrom(const IMFileState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileState::IsInitialized() const {
  return true;
}

void IMFileState::InternalSwap(IMFileState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileState, _impl_.user_id_)
      + sizeof(IMFileState::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(IMFileState, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

std::string IMFileState::GetTypeName() const {
  return "IM.File.IMFileState";
}


// ===================================================================

class IMFilePullDataReq::_Internal {
 public:
};

IMFilePullDataReq::IMFilePullDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFilePullDataReq)
}
IMFilePullDataReq::IMFilePullDataReq(const IMFilePullDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFilePullDataReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.trans_mode_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.data_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_size_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.data_size_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFilePullDataReq)
}

inline void IMFilePullDataReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.trans_mode_){0}
    , decltype(_impl_.offset_){0u}
    , decltype(_impl_.data_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFilePullDataReq::~IMFilePullDataReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFilePullDataReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFilePullDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void IMFilePullDataReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFilePullDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFilePullDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_size_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.data_size_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFilePullDataReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.FileType trans_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_mode(static_cast<::IM::BaseDefine::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFilePullDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFilePullDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFilePullDataReq.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.FileType trans_mode = 3;
  if (this->_internal_trans_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_trans_mode(), target);
  }

  // uint32 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  // uint32 data_size = 5;
  if (this->_internal_data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFilePullDataReq)
  return target;
}

size_t IMFilePullDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFilePullDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // uint32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.FileType trans_mode = 3;
  if (this->_internal_trans_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trans_mode());
  }

  // uint32 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // uint32 data_size = 5;
  if (this->_internal_data_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFilePullDataReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFilePullDataReq*>(
      &from));
}

void IMFilePullDataReq::MergeFrom(const IMFilePullDataReq& from) {
  IMFilePullDataReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFilePullDataReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_trans_mode() != 0) {
    _this->_internal_set_trans_mode(from._internal_trans_mode());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_data_size() != 0) {
    _this->_internal_set_data_size(from._internal_data_size());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFilePullDataReq::CopyFrom(const IMFilePullDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFilePullDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFilePullDataReq::IsInitialized() const {
  return true;
}

void IMFilePullDataReq::InternalSwap(IMFilePullDataReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFilePullDataReq, _impl_.data_size_)
      + sizeof(IMFilePullDataReq::_impl_.data_size_)
      - PROTOBUF_FIELD_OFFSET(IMFilePullDataReq, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

std::string IMFilePullDataReq::GetTypeName() const {
  return "IM.File.IMFilePullDataReq";
}


// ===================================================================

class IMFilePullDataRsp::_Internal {
 public:
};

IMFilePullDataRsp::IMFilePullDataRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFilePullDataRsp)
}
IMFilePullDataRsp::IMFilePullDataRsp(const IMFilePullDataRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFilePullDataRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_code_, &from._impl_.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFilePullDataRsp)
}

inline void IMFilePullDataRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.result_code_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFilePullDataRsp::~IMFilePullDataRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFilePullDataRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFilePullDataRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
  _impl_.data_.Destroy();
}

void IMFilePullDataRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFilePullDataRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFilePullDataRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFilePullDataRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFilePullDataRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFilePullDataRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFilePullDataRsp.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // uint32 user_id = 3;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // uint32 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFilePullDataRsp)
  return target;
}

size_t IMFilePullDataRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFilePullDataRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  // uint32 user_id = 3;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFilePullDataRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFilePullDataRsp*>(
      &from));
}

void IMFilePullDataRsp::MergeFrom(const IMFilePullDataRsp& from) {
  IMFilePullDataRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFilePullDataRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFilePullDataRsp::CopyFrom(const IMFilePullDataRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFilePullDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFilePullDataRsp::IsInitialized() const {
  return true;
}

void IMFilePullDataRsp::InternalSwap(IMFilePullDataRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFilePullDataRsp, _impl_.offset_)
      + sizeof(IMFilePullDataRsp::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(IMFilePullDataRsp, _impl_.result_code_)>(
          reinterpret_cast<char*>(&_impl_.result_code_),
          reinterpret_cast<char*>(&other->_impl_.result_code_));
}

std::string IMFilePullDataRsp::GetTypeName() const {
  return "IM.File.IMFilePullDataRsp";
}


// ===================================================================

class IMFileReq::_Internal {
 public:
};

IMFileReq::IMFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileReq)
}
IMFileReq::IMFileReq(const IMFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.from_user_id_){}
    , decltype(_impl_.to_user_id_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.trans_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_user_id_, &from._impl_.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trans_mode_) -
    reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileReq)
}

inline void IMFileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.from_user_id_){0u}
    , decltype(_impl_.to_user_id_){0u}
    , decltype(_impl_.file_size_){0u}
    , decltype(_impl_.trans_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileReq::~IMFileReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void IMFileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  ::memset(&_impl_.from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.trans_mode_) -
      reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.trans_mode_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.FileType trans_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_mode(static_cast<::IM::BaseDefine::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileReq.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  // .IM.BaseDefine.FileType trans_mode = 5;
  if (this->_internal_trans_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_trans_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileReq)
  return target;
}

size_t IMFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
  }

  // .IM.BaseDefine.FileType trans_mode = 5;
  if (this->_internal_trans_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trans_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileReq*>(
      &from));
}

void IMFileReq::MergeFrom(const IMFileReq& from) {
  IMFileReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_from_user_id() != 0) {
    _this->_internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _this->_internal_set_to_user_id(from._internal_to_user_id());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_trans_mode() != 0) {
    _this->_internal_set_trans_mode(from._internal_trans_mode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileReq::CopyFrom(const IMFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileReq::IsInitialized() const {
  return true;
}

void IMFileReq::InternalSwap(IMFileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileReq, _impl_.trans_mode_)
      + sizeof(IMFileReq::_impl_.trans_mode_)
      - PROTOBUF_FIELD_OFFSET(IMFileReq, _impl_.from_user_id_)>(
          reinterpret_cast<char*>(&_impl_.from_user_id_),
          reinterpret_cast<char*>(&other->_impl_.from_user_id_));
}

std::string IMFileReq::GetTypeName() const {
  return "IM.File.IMFileReq";
}


// ===================================================================

class IMFileRsp::_Internal {
 public:
};

void IMFileRsp::clear_ip_addr_list() {
  _impl_.ip_addr_list_.Clear();
}
IMFileRsp::IMFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileRsp)
}
IMFileRsp::IMFileRsp(const IMFileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addr_list_){from._impl_.ip_addr_list_}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.from_user_id_){}
    , decltype(_impl_.to_user_id_){}
    , decltype(_impl_.trans_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_code_, &from._impl_.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trans_mode_) -
    reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileRsp)
}

inline void IMFileRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addr_list_){arena}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.result_code_){0u}
    , decltype(_impl_.from_user_id_){0u}
    , decltype(_impl_.to_user_id_){0u}
    , decltype(_impl_.trans_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileRsp::~IMFileRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_addr_list_.~RepeatedPtrField();
  _impl_.file_name_.Destroy();
  _impl_.task_id_.Destroy();
}

void IMFileRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_addr_list_.Clear();
  _impl_.file_name_.ClearToEmpty();
  _impl_.task_id_.ClearToEmpty();
  ::memset(&_impl_.result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.trans_mode_) -
      reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.trans_mode_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 from_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string task_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_addr_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.FileType trans_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_mode(static_cast<::IM::BaseDefine::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  // uint32 from_user_id = 2;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 3;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_to_user_id(), target);
  }

  // string file_name = 4;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileRsp.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // string task_id = 5;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileRsp.task_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_task_id(), target);
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ip_addr_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_ip_addr_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .IM.BaseDefine.FileType trans_mode = 7;
  if (this->_internal_trans_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_trans_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileRsp)
  return target;
}

size_t IMFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  total_size += 1UL * this->_internal_ip_addr_list_size();
  for (const auto& msg : this->_impl_.ip_addr_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string file_name = 4;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string task_id = 5;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  // uint32 from_user_id = 2;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 3;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  // .IM.BaseDefine.FileType trans_mode = 7;
  if (this->_internal_trans_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trans_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileRsp*>(
      &from));
}

void IMFileRsp::MergeFrom(const IMFileRsp& from) {
  IMFileRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ip_addr_list_.MergeFrom(from._impl_.ip_addr_list_);
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (from._internal_from_user_id() != 0) {
    _this->_internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _this->_internal_set_to_user_id(from._internal_to_user_id());
  }
  if (from._internal_trans_mode() != 0) {
    _this->_internal_set_trans_mode(from._internal_trans_mode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileRsp::CopyFrom(const IMFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileRsp::IsInitialized() const {
  return true;
}

void IMFileRsp::InternalSwap(IMFileRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_addr_list_.InternalSwap(&other->_impl_.ip_addr_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileRsp, _impl_.trans_mode_)
      + sizeof(IMFileRsp::_impl_.trans_mode_)
      - PROTOBUF_FIELD_OFFSET(IMFileRsp, _impl_.result_code_)>(
          reinterpret_cast<char*>(&_impl_.result_code_),
          reinterpret_cast<char*>(&other->_impl_.result_code_));
}

std::string IMFileRsp::GetTypeName() const {
  return "IM.File.IMFileRsp";
}


// ===================================================================

class IMFileNotify::_Internal {
 public:
};

void IMFileNotify::clear_ip_addr_list() {
  _impl_.ip_addr_list_.Clear();
}
IMFileNotify::IMFileNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileNotify)
}
IMFileNotify::IMFileNotify(const IMFileNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addr_list_){from._impl_.ip_addr_list_}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.from_user_id_){}
    , decltype(_impl_.to_user_id_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.trans_mode_){}
    , decltype(_impl_.offline_ready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_user_id_, &from._impl_.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offline_ready_) -
    reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.offline_ready_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileNotify)
}

inline void IMFileNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_addr_list_){arena}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.from_user_id_){0u}
    , decltype(_impl_.to_user_id_){0u}
    , decltype(_impl_.file_size_){0u}
    , decltype(_impl_.trans_mode_){0}
    , decltype(_impl_.offline_ready_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileNotify::~IMFileNotify() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_addr_list_.~RepeatedPtrField();
  _impl_.file_name_.Destroy();
  _impl_.task_id_.Destroy();
}

void IMFileNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_addr_list_.Clear();
  _impl_.file_name_.ClearToEmpty();
  _impl_.task_id_.ClearToEmpty();
  ::memset(&_impl_.from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offline_ready_) -
      reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.offline_ready_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_addr_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.FileType trans_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_mode(static_cast<::IM::BaseDefine::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 offline_ready = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.offline_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileNotify.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  // string task_id = 5;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileNotify.task_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_task_id(), target);
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ip_addr_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_ip_addr_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .IM.BaseDefine.FileType trans_mode = 7;
  if (this->_internal_trans_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_trans_mode(), target);
  }

  // uint32 offline_ready = 8;
  if (this->_internal_offline_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_offline_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileNotify)
  return target;
}

size_t IMFileNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;
  total_size += 1UL * this->_internal_ip_addr_list_size();
  for (const auto& msg : this->_impl_.ip_addr_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string task_id = 5;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  // uint32 file_size = 4;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
  }

  // .IM.BaseDefine.FileType trans_mode = 7;
  if (this->_internal_trans_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trans_mode());
  }

  // uint32 offline_ready = 8;
  if (this->_internal_offline_ready() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offline_ready());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileNotify*>(
      &from));
}

void IMFileNotify::MergeFrom(const IMFileNotify& from) {
  IMFileNotify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ip_addr_list_.MergeFrom(from._impl_.ip_addr_list_);
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_from_user_id() != 0) {
    _this->_internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _this->_internal_set_to_user_id(from._internal_to_user_id());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_trans_mode() != 0) {
    _this->_internal_set_trans_mode(from._internal_trans_mode());
  }
  if (from._internal_offline_ready() != 0) {
    _this->_internal_set_offline_ready(from._internal_offline_ready());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileNotify::CopyFrom(const IMFileNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileNotify::IsInitialized() const {
  return true;
}

void IMFileNotify::InternalSwap(IMFileNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_addr_list_.InternalSwap(&other->_impl_.ip_addr_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileNotify, _impl_.offline_ready_)
      + sizeof(IMFileNotify::_impl_.offline_ready_)
      - PROTOBUF_FIELD_OFFSET(IMFileNotify, _impl_.from_user_id_)>(
          reinterpret_cast<char*>(&_impl_.from_user_id_),
          reinterpret_cast<char*>(&other->_impl_.from_user_id_));
}

std::string IMFileNotify::GetTypeName() const {
  return "IM.File.IMFileNotify";
}


// ===================================================================

class IMFileHasOfflineReq::_Internal {
 public:
  using HasBits = decltype(std::declval<IMFileHasOfflineReq>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMFileHasOfflineReq::IMFileHasOfflineReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileHasOfflineReq)
}
IMFileHasOfflineReq::IMFileHasOfflineReq(const IMFileHasOfflineReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileHasOfflineReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileHasOfflineReq)
}

inline void IMFileHasOfflineReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileHasOfflineReq::~IMFileHasOfflineReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileHasOfflineReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileHasOfflineReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attach_data_.Destroy();
}

void IMFileHasOfflineReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileHasOfflineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileHasOfflineReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileHasOfflineReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileHasOfflineReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileHasOfflineReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileHasOfflineReq)
  return target;
}

size_t IMFileHasOfflineReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileHasOfflineReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileHasOfflineReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileHasOfflineReq*>(
      &from));
}

void IMFileHasOfflineReq::MergeFrom(const IMFileHasOfflineReq& from) {
  IMFileHasOfflineReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileHasOfflineReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileHasOfflineReq::CopyFrom(const IMFileHasOfflineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileHasOfflineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileHasOfflineReq::IsInitialized() const {
  return true;
}

void IMFileHasOfflineReq::InternalSwap(IMFileHasOfflineReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMFileHasOfflineReq::GetTypeName() const {
  return "IM.File.IMFileHasOfflineReq";
}


// ===================================================================

class IMFileHasOfflineRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<IMFileHasOfflineRsp>()._impl_._has_bits_);
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void IMFileHasOfflineRsp::clear_offline_file_list() {
  _impl_.offline_file_list_.Clear();
}
void IMFileHasOfflineRsp::clear_ip_addr_list() {
  _impl_.ip_addr_list_.Clear();
}
IMFileHasOfflineRsp::IMFileHasOfflineRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileHasOfflineRsp)
}
IMFileHasOfflineRsp::IMFileHasOfflineRsp(const IMFileHasOfflineRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileHasOfflineRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offline_file_list_){from._impl_.offline_file_list_}
    , decltype(_impl_.ip_addr_list_){from._impl_.ip_addr_list_}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_id_ = from._impl_.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileHasOfflineRsp)
}

inline void IMFileHasOfflineRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offline_file_list_){arena}
    , decltype(_impl_.ip_addr_list_){arena}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileHasOfflineRsp::~IMFileHasOfflineRsp() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileHasOfflineRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileHasOfflineRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.offline_file_list_.~RepeatedPtrField();
  _impl_.ip_addr_list_.~RepeatedPtrField();
  _impl_.attach_data_.Destroy();
}

void IMFileHasOfflineRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileHasOfflineRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileHasOfflineRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offline_file_list_.Clear();
  _impl_.ip_addr_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.attach_data_.ClearNonDefaultToEmpty();
  }
  _impl_.user_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileHasOfflineRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_offline_file_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_addr_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileHasOfflineRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileHasOfflineRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_offline_file_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_offline_file_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ip_addr_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_ip_addr_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (_internal_has_attach_data()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileHasOfflineRsp)
  return target;
}

size_t IMFileHasOfflineRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileHasOfflineRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
  total_size += 1UL * this->_internal_offline_file_list_size();
  for (const auto& msg : this->_impl_.offline_file_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;
  total_size += 1UL * this->_internal_ip_addr_list_size();
  for (const auto& msg : this->_impl_.ip_addr_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileHasOfflineRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileHasOfflineRsp*>(
      &from));
}

void IMFileHasOfflineRsp::MergeFrom(const IMFileHasOfflineRsp& from) {
  IMFileHasOfflineRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileHasOfflineRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.offline_file_list_.MergeFrom(from._impl_.offline_file_list_);
  _this->_impl_.ip_addr_list_.MergeFrom(from._impl_.ip_addr_list_);
  if (from._internal_has_attach_data()) {
    _this->_internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileHasOfflineRsp::CopyFrom(const IMFileHasOfflineRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileHasOfflineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileHasOfflineRsp::IsInitialized() const {
  return true;
}

void IMFileHasOfflineRsp::InternalSwap(IMFileHasOfflineRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.offline_file_list_.InternalSwap(&other->_impl_.offline_file_list_);
  _impl_.ip_addr_list_.InternalSwap(&other->_impl_.ip_addr_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.user_id_, other->_impl_.user_id_);
}

std::string IMFileHasOfflineRsp::GetTypeName() const {
  return "IM.File.IMFileHasOfflineRsp";
}


// ===================================================================

class IMFileAddOfflineReq::_Internal {
 public:
};

IMFileAddOfflineReq::IMFileAddOfflineReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileAddOfflineReq)
}
IMFileAddOfflineReq::IMFileAddOfflineReq(const IMFileAddOfflineReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileAddOfflineReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.from_user_id_){}
    , decltype(_impl_.to_user_id_){}
    , decltype(_impl_.file_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_user_id_, &from._impl_.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.file_size_) -
    reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.file_size_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileAddOfflineReq)
}

inline void IMFileAddOfflineReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.from_user_id_){0u}
    , decltype(_impl_.to_user_id_){0u}
    , decltype(_impl_.file_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileAddOfflineReq::~IMFileAddOfflineReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileAddOfflineReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileAddOfflineReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
  _impl_.file_name_.Destroy();
}

void IMFileAddOfflineReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileAddOfflineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileAddOfflineReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  ::memset(&_impl_.from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.file_size_) -
      reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.file_size_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileAddOfflineReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileAddOfflineReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileAddOfflineReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileAddOfflineReq.task_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_id(), target);
  }

  // string file_name = 4;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileAddOfflineReq.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // uint32 file_size = 5;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileAddOfflineReq)
  return target;
}

size_t IMFileAddOfflineReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileAddOfflineReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string file_name = 4;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  // uint32 file_size = 5;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileAddOfflineReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileAddOfflineReq*>(
      &from));
}

void IMFileAddOfflineReq::MergeFrom(const IMFileAddOfflineReq& from) {
  IMFileAddOfflineReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileAddOfflineReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_from_user_id() != 0) {
    _this->_internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _this->_internal_set_to_user_id(from._internal_to_user_id());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileAddOfflineReq::CopyFrom(const IMFileAddOfflineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileAddOfflineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileAddOfflineReq::IsInitialized() const {
  return true;
}

void IMFileAddOfflineReq::InternalSwap(IMFileAddOfflineReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileAddOfflineReq, _impl_.file_size_)
      + sizeof(IMFileAddOfflineReq::_impl_.file_size_)
      - PROTOBUF_FIELD_OFFSET(IMFileAddOfflineReq, _impl_.from_user_id_)>(
          reinterpret_cast<char*>(&_impl_.from_user_id_),
          reinterpret_cast<char*>(&other->_impl_.from_user_id_));
}

std::string IMFileAddOfflineReq::GetTypeName() const {
  return "IM.File.IMFileAddOfflineReq";
}


// ===================================================================

class IMFileDelOfflineReq::_Internal {
 public:
};

IMFileDelOfflineReq::IMFileDelOfflineReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IM.File.IMFileDelOfflineReq)
}
IMFileDelOfflineReq::IMFileDelOfflineReq(const IMFileDelOfflineReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IMFileDelOfflineReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.from_user_id_){}
    , decltype(_impl_.to_user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_user_id_, &from._impl_.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_user_id_) -
    reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.to_user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.File.IMFileDelOfflineReq)
}

inline void IMFileDelOfflineReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.from_user_id_){0u}
    , decltype(_impl_.to_user_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IMFileDelOfflineReq::~IMFileDelOfflineReq() {
  // @@protoc_insertion_point(destructor:IM.File.IMFileDelOfflineReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMFileDelOfflineReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
}

void IMFileDelOfflineReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMFileDelOfflineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.File.IMFileDelOfflineReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  ::memset(&_impl_.from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_user_id_) -
      reinterpret_cast<char*>(&_impl_.from_user_id_)) + sizeof(_impl_.to_user_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMFileDelOfflineReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMFileDelOfflineReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.File.IMFileDelOfflineReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_user_id(), target);
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.File.IMFileDelOfflineReq.task_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.File.IMFileDelOfflineReq)
  return target;
}

size_t IMFileDelOfflineReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.File.IMFileDelOfflineReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->_internal_to_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFileDelOfflineReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IMFileDelOfflineReq*>(
      &from));
}

void IMFileDelOfflineReq::MergeFrom(const IMFileDelOfflineReq& from) {
  IMFileDelOfflineReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:IM.File.IMFileDelOfflineReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_from_user_id() != 0) {
    _this->_internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_user_id() != 0) {
    _this->_internal_set_to_user_id(from._internal_to_user_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMFileDelOfflineReq::CopyFrom(const IMFileDelOfflineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.File.IMFileDelOfflineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileDelOfflineReq::IsInitialized() const {
  return true;
}

void IMFileDelOfflineReq::InternalSwap(IMFileDelOfflineReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFileDelOfflineReq, _impl_.to_user_id_)
      + sizeof(IMFileDelOfflineReq::_impl_.to_user_id_)
      - PROTOBUF_FIELD_OFFSET(IMFileDelOfflineReq, _impl_.from_user_id_)>(
          reinterpret_cast<char*>(&_impl_.from_user_id_),
          reinterpret_cast<char*>(&other->_impl_.from_user_id_));
}

std::string IMFileDelOfflineReq::GetTypeName() const {
  return "IM.File.IMFileDelOfflineReq";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace File
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::File::IMFileLoginReq*
Arena::CreateMaybeMessage< ::IM::File::IMFileLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileLoginRsp*
Arena::CreateMaybeMessage< ::IM::File::IMFileLoginRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileLoginRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileState*
Arena::CreateMaybeMessage< ::IM::File::IMFileState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileState >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFilePullDataReq*
Arena::CreateMaybeMessage< ::IM::File::IMFilePullDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFilePullDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFilePullDataRsp*
Arena::CreateMaybeMessage< ::IM::File::IMFilePullDataRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFilePullDataRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileReq*
Arena::CreateMaybeMessage< ::IM::File::IMFileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileRsp*
Arena::CreateMaybeMessage< ::IM::File::IMFileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileNotify*
Arena::CreateMaybeMessage< ::IM::File::IMFileNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileHasOfflineReq*
Arena::CreateMaybeMessage< ::IM::File::IMFileHasOfflineReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileHasOfflineReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileHasOfflineRsp*
Arena::CreateMaybeMessage< ::IM::File::IMFileHasOfflineRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileHasOfflineRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileAddOfflineReq*
Arena::CreateMaybeMessage< ::IM::File::IMFileAddOfflineReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileAddOfflineReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::File::IMFileDelOfflineReq*
Arena::CreateMaybeMessage< ::IM::File::IMFileDelOfflineReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::File::IMFileDelOfflineReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
